{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/avator.jpg","path":"img/avator.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"d8941d95ca8cfbefd576e208b21116cdb53fee86","modified":1651634569814},{"_id":"source/about/index.md","hash":"a82f8f4eb4506d9059d0b353d17b4c0d4365c777","modified":1651634499813},{"_id":"source/tags/index.md","hash":"63c8dd9e6beb3992b708bee2b03c1116d7c4c4cf","modified":1651634482818},{"_id":"source/categories/index.md","hash":"97051392e4cb4d0e5e464d1e6892b09f76653b1e","modified":1651634462797},{"_id":"source/_posts/Game/饥荒种植巨大作物四季搭配表.md","hash":"d5e237c83c17888ec70bc49ad3c12c183d04ebb8","modified":1652663185576},{"_id":"source/friends/index.md","hash":"c2cd21d715ce65cf645ece8fb7e79c792e86c1fa","modified":1651634516791},{"_id":"source/_posts/JS/1.前言.md","hash":"842c3d680bb5471b26bd37db391feffca5c7f171","modified":1653186968653},{"_id":"source/_posts/JS/2.数据类型.md","hash":"c71c1f5009203e5f6216c687203804f9ddfd23b6","modified":1653211397359},{"_id":"source/_posts/TS/TypeScript介绍.md","hash":"c3ce94e0b66fc59e7a3eba813330a6723e22b92d","modified":1651926463939},{"_id":"source/_posts/TS/TypeScript配置文件.md","hash":"4047e5506dff94f5125ff7e39acc703e8d01842b","modified":1651927122245},{"_id":"source/_posts/TS/使用第三方库简化流程.md","hash":"b6dee656959af600f2d3ed7f6c531c480d128f23","modified":1652607246554},{"_id":"source/_posts/Life/typora使用图床.md","hash":"47463c08b923c98091281a716784d1e46e50f0de","modified":1651674980514},{"_id":"source/_posts/Life/wallpaper.md","hash":"eba8434cc3bf6bc293ee94bec625ccbecd2d9524","modified":1651925523710},{"_id":"source/_posts/JS/运算符.md","hash":"496c14c97eced06242e5a2211b8612fa980cbcd5","modified":1654579619326},{"_id":"source/_posts/JS/3.变量.md","hash":"7633be2454e7c56898bea1ce643a087344b2400c","modified":1653211680002},{"_id":"source/_posts/微信小程序/1.认识微信小程序的基本设置.md","hash":"527d3a2391242413338983173e391d4c5e3ad222","modified":1654823250099},{"_id":"source/_posts/微信小程序/2.微信小程序的生命周期.md","hash":"10419e763bca70e7edef614db1143c3a0c33de6d","modified":1655252974567},{"_id":"source/_posts/功能/blob文件下载.md","hash":"751903700c864d7562cd04ef6bcf2c6c6550a05c","modified":1655254688555},{"_id":"source/_posts/功能/pdf导出.md","hash":"dd688573d88c33fdcd773f038bc9d9fca6ee7475","modified":1655253545861},{"_id":"source/_posts/problem/css/清除text-indent对img的影响.md","hash":"e78daf091eed395040f0f37caf8c0e858c6ea5d8","modified":1655168938426},{"_id":"source/_posts/problem/echarts/使用地图坐标轴遇到的问题.md","hash":"6dd9b317b3782607082a58dfa50355de8e6e868b","modified":1655255887295},{"_id":"source/_posts/problem/yarn/全局安装后命令不起作用.md","hash":"2974979a0c6d7d8315e4bd1428be6e794e0765a9","modified":1653657258456},{"_id":"themes/butterfly/README_CN.md","hash":"fafeccf7b611e8d16d524d27558d942cc9fe0c2f","modified":1653960483824},{"_id":"themes/butterfly/README.md","hash":"d83c496aadb40f5bf9c67bdeba527353409bc559","modified":1653960483823},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1651643800604},{"_id":"themes/butterfly/_config.yml","hash":"a06c8a50a49d14c8b53187239f4813a1463c6c64","modified":1651644580616},{"_id":"themes/butterfly/languages/default.yml","hash":"335731ef259a3cec2499a2d5b050025ff4bdc608","modified":1651643800608},{"_id":"themes/butterfly/package.json","hash":"f5f4bb2afaea72ba3b8843924750fb480a29619a","modified":1653960483834},{"_id":"themes/butterfly/languages/en.yml","hash":"a96ab1bbe74e99ca2e4d67da9d83f442eb9b73af","modified":1651643800609},{"_id":"themes/butterfly/.github/stale.yml","hash":"79b830939587a5c029b20db6615ba73907d60bb4","modified":1651643800602},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"dcb10d62249bb149af8ad78db3ee6e342c6d6be7","modified":1651643800611},{"_id":"themes/butterfly/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1651643800611},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"4adf079fb0170e3a8de6ddbb0392d6d1120030c4","modified":1651643800610},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1651643800612},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1651643800678},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"e1043b8f149371d5a4ab0f1306eabc2988bed071","modified":1651643800601},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1651643800603},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1651643800678},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1651643800601},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1651643800679},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1651643800613},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1651643800602},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1651643800680},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"ddea99847fd41323f183cd0c9dae3174c586f5b3","modified":1651643800613},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"072442bcd2075cf4c20fc81468587ca1898a2d5c","modified":1653661446841},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"343f3cb328eb27ef04c0a4bf7fab44b1be76100a","modified":1651643800615},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"4473ba26e06a782e91ed181d0ceb83f8745aad1f","modified":1651643800625},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1651643800682},{"_id":"themes/butterfly/scripts/events/config.js","hash":"8c3fa850933e4165c3354dea7b82d6f738bd7186","modified":1653960483835},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1651643800631},{"_id":"themes/butterfly/scripts/events/init.js","hash":"b3e05e3440b078f57391c113d6b0c8ecff112720","modified":1653960483836},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"205562ec188bfba5686c51af77486550d0927df5","modified":1651643800633},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1651643800634},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1651643800685},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1651643800684},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"b92cc4648cfe5fb28c58943727823d1178b73a4a","modified":1651643800685},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1651643800687},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1651643800688},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"6c3b7d0874fa499800a4fd49894c481b05ec750c","modified":1651643800685},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"384de3c04809ec5fa996e8aa0628f770cd4bff3e","modified":1651643800688},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"c445140fa16f19bf5fb617fa735504e7799d4d42","modified":1651643800688},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1651643800691},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"83bfb16ab8d440be04e1b1f889f6affa7ad65a67","modified":1651643800690},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"6d4cd2393945a9316339351cab588265f5c18d73","modified":1651643800691},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1651643800691},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1651643800693},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1651643800693},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1651643800694},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1651643800694},{"_id":"themes/butterfly/source/img/avator.jpg","hash":"e0294e33630ba6902eee1914a8be89c797b10e3a","modified":1651652465167},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"420ba8b11e7316b4c09eb301d39814bc9bae9f90","modified":1651643800694},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1651643800695},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1651643800695},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1651643800731},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"24b980072ae3dfad5fc737f5c18923fa3e40c341","modified":1651652048526},{"_id":"themes/butterfly/source/img/favicon.png","hash":"fcfb719bc950e623dfb6b53206e3472a692448ff","modified":1651570366427},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1651643800733},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1651643800729},{"_id":"themes/butterfly/source/css/var.styl","hash":"584ef7b18d5e677eb2e62f9b139097d3b714a993","modified":1651643800729},{"_id":"themes/butterfly/source/js/main.js","hash":"a2c1c55b5b8ec9a83cf6242ebc9ea9be95e1f0c1","modified":1651643800734},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1651643800736},{"_id":"themes/butterfly/source/js/utils.js","hash":"fdb9e5b38f076953a2431b8f682388b030694b55","modified":1651643800737},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c1e45d4d0bd905ddcd2282de4fe89be92e67847d","modified":1651643800616},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1651643800616},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"8a3f9e674b44e6a92d4df22baca65d9d30007dc3","modified":1651643800617},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1651643800617},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1651643800618},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fc3e67e5ae4774d9e89964ba96beed28f34ee8f0","modified":1651643800619},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1651643800618},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1651643800619},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1651643800620},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"3a2797d2744607ba6cdb5a02853851957c0f7e29","modified":1651643800621},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"a9e56b1c41bf327859b0a7bcb8e72b458bd851b2","modified":1651643800622},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1651643800624},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"c65291a389a71fe4d903b44ca3083f8f4cb88655","modified":1653960483825},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1651643800622},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1651643800626},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1651643800626},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1651643800629},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1651652895270},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e2eba0fcb8332cb333b2aff9c76664e40e2e1974","modified":1651643800630},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"8f43fdeaf8cff4a35bab74b48c963786ca015620","modified":1651643800631},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1651643800627},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"9c8e65939d048a579ea08d063c0f98550376f536","modified":1651643800628},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1651643800632},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1651643800633},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1651643800670},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1651643800671},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1651643800671},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"08641633d38903351a7424baf9893d9038ba057d","modified":1651643800672},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1651643800673},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1651643800673},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1651643800674},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1651643800673},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1651643800676},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1651643800675},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1651643800675},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"62adef7998fb9bebc5891a49472cfea944a1bf7a","modified":1651643800676},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1651643800635},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"5e0e9e9b2cd3c256d52423e2278e790aa387a53a","modified":1651643800677},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"78fea853d0ffbcb49df3aa454701476dbc8aec71","modified":1653960483833},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1651643800654},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1651643800662},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1651643800664},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f562648de515abc873609bfe9b9f799c8cf42b72","modified":1651643800697},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"7b5fea9e1c113cab4c75f9d31d8efebe70d82e7a","modified":1651643800669},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"b9d7d23dc8810542b8c8ffcbfbd3694318debcc6","modified":1651643800698},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1651643800705},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1651643800706},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"b224bed22ce063d0d74e1f135812e16fdba87bca","modified":1651643800705},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"f3aac52defb3497079a313e8c63ac2f7ee24dfbe","modified":1651643800707},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"e931ef81754a7b9d999fa23d134c620e68e75491","modified":1651643800707},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"844858ae87c7278996ce484c6b456db354c48764","modified":1651643800708},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"9f880a6fa91784a4d3e9ffb0d4607e8a74d4d929","modified":1651643800709},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1651643800710},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1651643800710},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1651643800709},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"1c1c585ba99cb4004956b5e98fc044260b456f99","modified":1651643800711},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1651643800712},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"e02b52bdd337c0ed3c9d3a507d1011403c38881d","modified":1651643800713},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1651643800700},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1651643800704},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"0bcd07ffbd2a86a1b24eaefabd7e278034b14ee2","modified":1651643800714},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"1fed25162d7204480e9bcf476b3246e1717107ca","modified":1651643800715},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"d72218cb5a6bfe048ae1c92009bd815a08a53d3a","modified":1651643800716},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1651643800716},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1651643800717},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1651643800718},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1651643800717},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"c42b872df237726483d93d6124b8751d4f64cf86","modified":1651643800718},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1651643800719},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d1398399eb7f1cc004fbcefa18f56188cc8fec8c","modified":1651643800720},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1651643800722},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"84c42716e833d2d1dd47195ea996803ffa0e58ec","modified":1651643800723},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1651643800721},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1651643800723},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"45792c13c7c439d412b7dc597d74d24f3b598406","modified":1653960483836},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1651643800724},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1651643800725},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1651643800724},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"076cd87805207c9b5612ec9771f6994287f4c169","modified":1651643800725},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1651643800726},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1651643800727},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1651643800728},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"6e20ab5f90a0dd6eb6fdca58e69961bd2f16a632","modified":1651643800735},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"f72e002d56903a49c36174e77e42f88b8af8bd44","modified":1651643800735},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1651643800641},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1651643800642},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1651643800641},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1651643800643},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1651643800643},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1651643800636},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1651643800644},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"d5f81fd5443a1b09efb165b5f4447a35949d14ad","modified":1651643800645},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4eebb2d94ca75809ef0cf32d70f13e9bf1e87091","modified":1651643800636},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"a18415004d03c0a1783eccac522fbcb6ce0ea1f1","modified":1651643800637},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"5f921c64073f73ae1f2d80969f4d3905d91396ce","modified":1651643800645},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"a222477bddba3c646ee9b8560442c2cb204adb11","modified":1651643800646},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1653960483826},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1651643800647},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"da9075d781baad00b647b52b0fe2018e3a602cd3","modified":1653960483827},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"6e5ccc9ea4346c71ad4cbf1e9f1cb83bb45e6f27","modified":1651643800640},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"3df2f59c9552a1f2e6f0d50c4ae97e72c5392b59","modified":1651643800647},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"414f876d28f8497d6d551363a89c5c69bf1533eb","modified":1651643800648},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"810e8ca2669433f649329859922aabbb30d76178","modified":1651643800649},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1651643800650},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"132c94a653232b8a43dfecac057f56e6f39ed27e","modified":1653960483828},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1651643800655},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"056756e43908519039b8bbd7a90f8c49d561eb52","modified":1653960483830},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"fdb544b0e0198faeec6a2ac239036c972446287e","modified":1653960483829},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1653960483831},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1651643800658},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1651643800651},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1651643800659},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1651643800652},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"16cf05cf9649322da57e9b8d316573bb65f8d8d8","modified":1651643800660},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e45152e4ebc3fb2462916be93f98d18f0574f2d3","modified":1651643800653},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1653960483832},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1651643800661},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"63ef0b2a75cf26a94c5bcd885f3a1c144451b852","modified":1651643800662},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1651643800665},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"af5d3d87b736598dafcf5871863596592cacdfe1","modified":1651643800664},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3b5ef84744a1a8fec5a63554079008040d96f924","modified":1651643800666},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1651643800666},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"b45fc15c3ae7db3a0fbce0d6da74a72a95ca8a2b","modified":1651643800668},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1651643800701},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1651643800668},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1651643800701},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1651643800667},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1651643800702},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1651643800703},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1651643800703},{"_id":"public/404/index.html","hash":"acd41cc20de77759cecb54f2d83db47ef9ddf046","modified":1655255915951},{"_id":"public/about/index.html","hash":"ae11b00cc4f911a8a150020d73b4c6da2e8bf24d","modified":1655255915951},{"_id":"public/categories/index.html","hash":"eefbd0b24f9aee86c2cce8ecc8c03726d2acd688","modified":1655255915951},{"_id":"public/tags/index.html","hash":"ec640dffdb1741f6f2a265a09e5f96d77683ad42","modified":1655255915951},{"_id":"public/friends/index.html","hash":"77a42e1d2daabbd47636178dc53f86bf0d16e83c","modified":1655255915951},{"_id":"public/cl4ewmvhm000x04wcao7z7bj6/9056bb9ec6b6/index.html","hash":"627521e6fe9d7d1d26c52488c3463530ab8b791b","modified":1655255915951},{"_id":"public/cl4ewmvhp001304wc1tjq0br0/939913d85c95/index.html","hash":"b21c4070fd2f6fef5cfeee4ebe17282748a8af3e","modified":1655255915951},{"_id":"public/cl4ewmvhn001104wc0fp10iwi/3f2c2c3c1969/index.html","hash":"136a56421c5757f11a67547b3009cf331fecb4f9","modified":1655255915951},{"_id":"public/cl4ewmvhl000u04wc1sxr8izc/84d301fa7074/index.html","hash":"aaf9f44769252628e22b300823f80a15fc0fbd17","modified":1655255915951},{"_id":"public/cl4ewmvi8002g04wcgq979dvy/95c66f36eb70/index.html","hash":"956fcd7338fdfa1f296e6ed23ee63ccdf22cff34","modified":1655255915951},{"_id":"public/cl4ewmvhj000q04wc08fb7x9j/eef54112927d/index.html","hash":"c2dfabe7246c8c8f07c086b5642f4e67134c2749","modified":1655255915951},{"_id":"public/cl4ewmvhh000k04wcezbmd6ag/59a4c6b1d6a5/index.html","hash":"d0ace3691b46273bc31646f058c1aedd61eab768","modified":1655255915951},{"_id":"public/cl4ewmvh9000704wcdj1f3knu/bb6d5ecd540b/index.html","hash":"9c313eb3d06697673d7d4b021056c8379ada2cf6","modified":1655255915951},{"_id":"public/cl4ewmvhd000f04wc85gb1yin/fc2710fe313e/index.html","hash":"dd0b571213a98ed5e52c06e8cc14facb8d4326e3","modified":1655255915951},{"_id":"public/cl4ewmvha000904wc8oy94iz3/ce84eb7de7be/index.html","hash":"9cb9088dc3f5ad21e1a3b001483fc6ea8440b162","modified":1655255915951},{"_id":"public/cl4ewmvi8002h04wc4iw9ft60/9bdb0f1892f1/index.html","hash":"9bbc88a11a240cd79f800de91b5494fa8207b552","modified":1655255915951},{"_id":"public/cl4ewmvhb000b04wchbbbawwj/3fc7b18a58c4/index.html","hash":"a0591335bca87ca63c8590b789390a57b2262f97","modified":1655255915951},{"_id":"public/cl4ewmvhc000e04wcco31bd9b/1a59a90de1ff/index.html","hash":"294c2b905db5bcd67a9b0abe8a73d3e1a17c3216","modified":1655255915951},{"_id":"public/cl4ewmvh4000304wcgalkhaxf/c7e41b6582a2/index.html","hash":"476e86f231eb03acd2f7fe13ac0d3586650a30e7","modified":1655255915951},{"_id":"public/cl4ewmvh1000104wcfz925h0n/4e735382ff85/index.html","hash":"ef52bea486ac999491e57c8049b60cc0b8b68381","modified":1655255915951},{"_id":"public/cl4ewmvhf000i04wcezgceozi/95a98f2dc8d9/index.html","hash":"85cf4183806c5d3ee5246144451d6e60301a53cf","modified":1655255915951},{"_id":"public/cl4ewmvhj000o04wcfeg183qa/7c9048ea706f/index.html","hash":"45a28ad2852feb5e3a3cf991690a482f56232187","modified":1655255915951},{"_id":"public/categories/Game/index.html","hash":"96420b3748612b9437d427db11e7040e8697303c","modified":1655255915951},{"_id":"public/categories/JavaScript/index.html","hash":"ca490a4f6333fb20afa42ab02dd5e10ba165165a","modified":1655255915951},{"_id":"public/categories/前端/index.html","hash":"26d670dea8d0d7931da17a96cde12309e67163ef","modified":1655255915951},{"_id":"public/categories/Game/饥荒/index.html","hash":"eec84b9e1d4782383e73a16ad8507f9f19abc62f","modified":1655255915951},{"_id":"public/categories/前端/TypeScript/index.html","hash":"867f260771157b234fde1a4702146a9178b0798d","modified":1655255915951},{"_id":"public/categories/微信小程序/index.html","hash":"15a9203ab63d65b50203b9fa3443253971fa13d5","modified":1655255915951},{"_id":"public/categories/功能/index.html","hash":"75280c9b2242aa078549dc40aadcca53b7abb83d","modified":1655255915951},{"_id":"public/categories/problem/index.html","hash":"d1b88f4517faf3f3b4f706bc4a82045510441212","modified":1655255915951},{"_id":"public/categories/problem/css/index.html","hash":"c8a6b0aeaa1223459aacd9e1223ff997c79911c7","modified":1655255915951},{"_id":"public/categories/problem/echarts/index.html","hash":"1e712512e02a2fe74e7259be38973a83132d6beb","modified":1655255915951},{"_id":"public/categories/problem/yarn/index.html","hash":"afd989e20da0e2baa307c8f762e4f59d9cd13d15","modified":1655255915951},{"_id":"public/archives/index.html","hash":"0d97e527a2b207f2c5503d57ac56296bd0cf96bc","modified":1655255915951},{"_id":"public/archives/page/2/index.html","hash":"32963f38c0842f2fff9787049dab96790bd0efb3","modified":1655255915951},{"_id":"public/archives/2022/index.html","hash":"266bebf9de8f033240d8d58e3caadb7889c7c309","modified":1655255915951},{"_id":"public/archives/2022/page/2/index.html","hash":"99ec2c054dee90c75407c80153cdf6158df62206","modified":1655255915951},{"_id":"public/archives/2022/05/index.html","hash":"b92b6d01689cebb48f341f2cff136e470a26c8a3","modified":1655255915951},{"_id":"public/index.html","hash":"e30aa0253f0ecf73e2ee73d7cc3e5c96da09419d","modified":1655255915951},{"_id":"public/archives/2022/05/page/2/index.html","hash":"db093788a401958d12674f923f853e3b7b5bd7de","modified":1655255915951},{"_id":"public/archives/2022/06/index.html","hash":"6541549554efe64b1c5a3a5d6e12a477db284514","modified":1655255915951},{"_id":"public/page/2/index.html","hash":"36576cdf16ac884f6563e6d4c5ec6832912be33f","modified":1655255915951},{"_id":"public/tags/Game/index.html","hash":"06e01f692c3dfc7a391e11682d907bb46153dd00","modified":1655255915951},{"_id":"public/tags/饥荒/index.html","hash":"6e6477eb3ade57b9e19dbc107da29019b4dd66f9","modified":1655255915951},{"_id":"public/tags/TypeScript/index.html","hash":"1ec2b9c7db6198100a7d7da8fa663f7b2495e158","modified":1655255915951},{"_id":"public/tags/JavaScript/index.html","hash":"95f2431f36c949d427dc1bcbf7b05fc9f0d165f6","modified":1655255915951},{"_id":"public/tags/wallpaper/index.html","hash":"e2d01ec852ef266b8bfa4a05b7e7be9c2e7d4e0b","modified":1655255915951},{"_id":"public/tags/typora/index.html","hash":"81519b2f81a439eca7d3269192c8acc8c6746b6c","modified":1655255915951},{"_id":"public/tags/微信小程序/index.html","hash":"85d08232013f003fe87f9cfd4f9b3a3a5ed2d08f","modified":1655255915951},{"_id":"public/tags/功能/index.html","hash":"286fb7a8480b8a10ac73a66896b7daea855ac85f","modified":1655255915951},{"_id":"public/tags/css/index.html","hash":"277fba5c347884b6d80b17d4a25db22624caa7b1","modified":1655255915951},{"_id":"public/tags/problem/index.html","hash":"34501f3504047ac0667893ae391a322efe07cc48","modified":1655255915951},{"_id":"public/tags/echarts/index.html","hash":"b65c2fb86c885d01129b03aba3f3f1562b92c224","modified":1655255915951},{"_id":"public/tags/yarn/index.html","hash":"1d36b55b2dc274ec5d0a7656e89fdd6d89b3e7c1","modified":1655255915951},{"_id":"public/img/avator.jpg","hash":"e0294e33630ba6902eee1914a8be89c797b10e3a","modified":1655255915951},{"_id":"public/img/favicon.ico","hash":"24b980072ae3dfad5fc737f5c18923fa3e40c341","modified":1655255915951},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1655255915951},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1655255915951},{"_id":"public/img/favicon.png","hash":"fcfb719bc950e623dfb6b53206e3472a692448ff","modified":1655255915951},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1655255915951},{"_id":"public/js/search/algolia.js","hash":"ce8131b712dca80f289015aef75f86e727f62981","modified":1655255915951},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1655255915951},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1655255915951},{"_id":"public/css/index.css","hash":"f2c53001d8c807ad139c68ae9567514d01ed4f1e","modified":1655255915951},{"_id":"public/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1655255915951},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1655255915951},{"_id":"source/_posts/JS/4.运算符.md","hash":"496c14c97eced06242e5a2211b8612fa980cbcd5","modified":1654579619326},{"_id":"source/_posts/JS/5.流程控制.md","hash":"6cd656c0747cb29dca24a7d493744dd9430c59dd","modified":1655341236536},{"_id":"source/_posts/openlayers/openlayers的基本要素.md","hash":"703799563ddcb943a390cb7ea4bdd7be237ce91a","modified":1656122948108}],"Category":[{"name":"Game","_id":"cl4ewmvh6000404wcadh96owq"},{"name":"前端","_id":"cl4ewmvhc000c04wc1hmaaeii"},{"name":"JavaScript","_id":"cl4ewmvhe000g04wc85td6ekt"},{"name":"饥荒","parent":"cl4ewmvh6000404wcadh96owq","_id":"cl4ewmvhk000r04wc7qb4cfe0"},{"name":"TypeScript","parent":"cl4ewmvhc000c04wc1hmaaeii","_id":"cl4ewmvhp001404wc08d83p6m"},{"name":"微信小程序","_id":"cl4ewmvhu001h04wc14zw9trq"},{"name":"功能","_id":"cl4ewmvhw001q04wcf4en3khl"},{"name":"problem","_id":"cl4ewmvhx001v04wc96445303"},{"name":"css","parent":"cl4ewmvhx001v04wc96445303","_id":"cl4ewmvhz002504wcd3eobvg0"},{"name":"echarts","parent":"cl4ewmvhx001v04wc96445303","_id":"cl4ewmvi9002j04wc2gfx9wcv"},{"name":"yarn","parent":"cl4ewmvhx001v04wc96445303","_id":"cl4ewmvia002l04wc61ge4il4"},{"name":"openlayers","_id":"cl4w1k6l90001sgwca0ibfaun"}],"Data":[],"Page":[{"title":"404","date":"2018-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---","updated":"2022-05-04T03:22:49.814Z","path":"404/index.html","comments":1,"_id":"cl4ewmvgy000004wcduma0k2s","content":"","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-3kqv3y.jpg","excerpt":"","more":""},{"title":"about","date":"2022-05-04T03:21:30.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-05-04 11:21:30\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2022-05-04T03:21:39.813Z","path":"about/index.html","comments":1,"_id":"cl4ewmvh3000204wc1n31hbq8","content":"","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-3kqv3y.jpg","excerpt":"","more":""},{"title":"categories","date":"2022-05-04T03:20:45.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-05-04 11:20:45\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2022-05-04T03:21:02.797Z","path":"categories/index.html","comments":1,"_id":"cl4ewmvh8000604wc1dpub6jt","content":"","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-0j1xm0.jpg","excerpt":"","more":""},{"title":"tags","date":"2022-05-04T03:21:14.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-05-04 11:21:14\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2022-05-04T03:21:22.818Z","path":"tags/index.html","comments":1,"_id":"cl4ewmvha000804wc1qah029l","content":"","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-2ew3pm.jpg","excerpt":"","more":""},{"title":"friends","date":"2022-05-04T03:21:48.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2022-05-04 11:21:48\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2022-05-04T03:21:56.791Z","path":"friends/index.html","comments":1,"_id":"cl4ewmvhb000a04wcebive3mj","content":"","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-0prgo3.jpg","excerpt":"","more":""}],"Post":[{"title":"饥荒种植巨大作物四季作物配比","date":"2022-05-07T09:16:08.000Z","cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/v2-4e49c42888f67e228bd69dd879b4c69b_720w.jpg","_content":"# 饥荒种植巨大作物四季作物配比\n\n![饥荒种植巨大作物四季作物配比](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/饥荒种植巨大作物四季作物配比.webp)\n\n种地使我快乐，嘿嘿嘿~","source":"_posts/Game/饥荒种植巨大作物四季搭配表.md","raw":"---\ntitle: 饥荒种植巨大作物四季作物配比\ndate: 2022-05-07 17:16:08\ncover: https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/v2-4e49c42888f67e228bd69dd879b4c69b_720w.jpg\ntags: \n  - Game\n  - 饥荒\ncategories:\n  - Game\n  - 饥荒\n---\n# 饥荒种植巨大作物四季作物配比\n\n![饥荒种植巨大作物四季作物配比](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/饥荒种植巨大作物四季作物配比.webp)\n\n种地使我快乐，嘿嘿嘿~","slug":"Game/饥荒种植巨大作物四季搭配表","published":1,"updated":"2022-05-16T01:06:25.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvh1000104wcfz925h0n","content":"<h1 id=\"饥荒种植巨大作物四季作物配比\"><a href=\"#饥荒种植巨大作物四季作物配比\" class=\"headerlink\" title=\"饥荒种植巨大作物四季作物配比\"></a>饥荒种植巨大作物四季作物配比</h1><p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/%E9%A5%A5%E8%8D%92%E7%A7%8D%E6%A4%8D%E5%B7%A8%E5%A4%A7%E4%BD%9C%E7%89%A9%E5%9B%9B%E5%AD%A3%E4%BD%9C%E7%89%A9%E9%85%8D%E6%AF%94.webp\" alt=\"饥荒种植巨大作物四季作物配比\"></p>\n<p>种地使我快乐，嘿嘿嘿~</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"饥荒种植巨大作物四季作物配比\"><a href=\"#饥荒种植巨大作物四季作物配比\" class=\"headerlink\" title=\"饥荒种植巨大作物四季作物配比\"></a>饥荒种植巨大作物四季作物配比</h1><p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/%E9%A5%A5%E8%8D%92%E7%A7%8D%E6%A4%8D%E5%B7%A8%E5%A4%A7%E4%BD%9C%E7%89%A9%E5%9B%9B%E5%AD%A3%E4%BD%9C%E7%89%A9%E9%85%8D%E6%AF%94.webp\" alt=\"饥荒种植巨大作物四季作物配比\"></p>\n<p>种地使我快乐，嘿嘿嘿~</p>\n"},{"title":"TypeScript介绍","date":"2022-05-07T12:19:28.000Z","_content":"\n# TypeScript介绍\n\n`TypeScript`是`JavaScript`的超集，是一个可选的、静态的**类型系统**（对代码中所有的表示福【变量、函数、参数、返回值】进行类型检查）。\n\n## TypeScript的特点💪\n\n- 可选的\n\n  顾名思义，爱用不用😛\n\n- 静态的\n\n  无论是`node`环境还是浏览器环境，都无法直接识别`TS`代码（需要使用`tsc`进行转换）\n\n  `TS`代码 ---> `tsc`转换 ---> `JS`代码\n\n  静态既类型检查发生在转换过程中，所以`TS`不参与代码的运行\n\n## TypeScript的安装💠\n\n```\nyarn global add typescript\n```\n","source":"_posts/TS/TypeScript介绍.md","raw":"---\ntitle: TypeScript介绍\ndate: 2022-05-07 20:19:28\ntags: TypeScript\ncategories:\n  - 前端\n  - TypeScript\n---\n\n# TypeScript介绍\n\n`TypeScript`是`JavaScript`的超集，是一个可选的、静态的**类型系统**（对代码中所有的表示福【变量、函数、参数、返回值】进行类型检查）。\n\n## TypeScript的特点💪\n\n- 可选的\n\n  顾名思义，爱用不用😛\n\n- 静态的\n\n  无论是`node`环境还是浏览器环境，都无法直接识别`TS`代码（需要使用`tsc`进行转换）\n\n  `TS`代码 ---> `tsc`转换 ---> `JS`代码\n\n  静态既类型检查发生在转换过程中，所以`TS`不参与代码的运行\n\n## TypeScript的安装💠\n\n```\nyarn global add typescript\n```\n","slug":"TS/TypeScript介绍","published":1,"updated":"2022-05-07T12:27:43.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvh4000304wcgalkhaxf","content":"<h1 id=\"TypeScript介绍\"><a href=\"#TypeScript介绍\" class=\"headerlink\" title=\"TypeScript介绍\"></a>TypeScript介绍</h1><p><code>TypeScript</code>是<code>JavaScript</code>的超集，是一个可选的、静态的<strong>类型系统</strong>（对代码中所有的表示福【变量、函数、参数、返回值】进行类型检查）。</p>\n<h2 id=\"TypeScript的特点💪\"><a href=\"#TypeScript的特点💪\" class=\"headerlink\" title=\"TypeScript的特点💪\"></a>TypeScript的特点💪</h2><ul>\n<li><p>可选的</p>\n<p>顾名思义，爱用不用😛</p>\n</li>\n<li><p>静态的</p>\n<p>无论是<code>node</code>环境还是浏览器环境，都无法直接识别<code>TS</code>代码（需要使用<code>tsc</code>进行转换）</p>\n<p><code>TS</code>代码 —&gt; <code>tsc</code>转换 —&gt; <code>JS</code>代码</p>\n<p>静态既类型检查发生在转换过程中，所以<code>TS</code>不参与代码的运行</p>\n</li>\n</ul>\n<h2 id=\"TypeScript的安装💠\"><a href=\"#TypeScript的安装💠\" class=\"headerlink\" title=\"TypeScript的安装💠\"></a>TypeScript的安装💠</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add typescript</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-4ve76m.jpg","excerpt":"","more":"<h1 id=\"TypeScript介绍\"><a href=\"#TypeScript介绍\" class=\"headerlink\" title=\"TypeScript介绍\"></a>TypeScript介绍</h1><p><code>TypeScript</code>是<code>JavaScript</code>的超集，是一个可选的、静态的<strong>类型系统</strong>（对代码中所有的表示福【变量、函数、参数、返回值】进行类型检查）。</p>\n<h2 id=\"TypeScript的特点💪\"><a href=\"#TypeScript的特点💪\" class=\"headerlink\" title=\"TypeScript的特点💪\"></a>TypeScript的特点💪</h2><ul>\n<li><p>可选的</p>\n<p>顾名思义，爱用不用😛</p>\n</li>\n<li><p>静态的</p>\n<p>无论是<code>node</code>环境还是浏览器环境，都无法直接识别<code>TS</code>代码（需要使用<code>tsc</code>进行转换）</p>\n<p><code>TS</code>代码 —&gt; <code>tsc</code>转换 —&gt; <code>JS</code>代码</p>\n<p>静态既类型检查发生在转换过程中，所以<code>TS</code>不参与代码的运行</p>\n</li>\n</ul>\n<h2 id=\"TypeScript的安装💠\"><a href=\"#TypeScript的安装💠\" class=\"headerlink\" title=\"TypeScript的安装💠\"></a>TypeScript的安装💠</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add typescript</span><br></pre></td></tr></table></figure>\n"},{"title":"数据类型","date":"2022-05-22T02:37:49.000Z","_content":"\n# 数据类型\n\n\n\n## 原始类型（基本类型）\n\n原始类型指不可再细分的类型，存放的是**具体的值**\n\n### number【数字类型】\n\n就是直接写一串数字，emmmmmm.....感觉说了一句废话~\n\n> 了解：\n>\n> 数字类型可以加上前缀来表示不同的进制\n>\n> 0：表示8进制\n>\n> 0x：表示16进制\n>\n> 0b：表示2进制\n\n### string【字符串类型】\n\n使用单引号（'）、双引号（\"）、反引号（`）【tab键上面的那个键】包裹的内容即为字符串类型\n\n> 在字符串中，特殊符号可以使用转义符（/）来进行转义\n\n### boolean【布尔类型】\n\n只有2种情况，`true`、`false`，表示真或假\n\n### undefined\n\n表示未定义，只有一种书写情况即`undefined`\n\n### null\n\n表示空，不存在\n\n### Symbol【符号类型】\n\n具有永不相等的特性，为ES6新增，具体在ES6中详解\n\n### Bigint\n\n支持更大范围的整数类型，为ES2020新增\n\n## 引用类型\n\n存放的是**内存地址**\n\n### object【对象类型】\n\n可以认为对象是由多个基本类型组合而成的\n\n```js\nvar user = {\n\tname: \"mikeahhui\",\n\tsex: \"man\",\n\tage: 18,\n\thaveGirlFriend: false,\n\n}\n```\n\n### function【函数】\n\n之后详解\n\n### 得到数据的类型\n\n使用`typeof`\n\n```\nconsole.log(typeof '嘿嘿'); // string\nconsole.log(typeof(123)); // number\n```\n\n## JS中的垃圾回收机制\n\n垃圾回收器，会定期的发现内存中无法访问的对象，该对象称为垃圾，垃圾回收器会自动在合适的时间将占用内存的内存释放掉\n","source":"_posts/JS/2.数据类型.md","raw":"---\ntitle: 数据类型\ndate: 2022-05-22 10:37:49\ntags: JavaScript\ncategories:\n - JavaScript\n---\n\n# 数据类型\n\n\n\n## 原始类型（基本类型）\n\n原始类型指不可再细分的类型，存放的是**具体的值**\n\n### number【数字类型】\n\n就是直接写一串数字，emmmmmm.....感觉说了一句废话~\n\n> 了解：\n>\n> 数字类型可以加上前缀来表示不同的进制\n>\n> 0：表示8进制\n>\n> 0x：表示16进制\n>\n> 0b：表示2进制\n\n### string【字符串类型】\n\n使用单引号（'）、双引号（\"）、反引号（`）【tab键上面的那个键】包裹的内容即为字符串类型\n\n> 在字符串中，特殊符号可以使用转义符（/）来进行转义\n\n### boolean【布尔类型】\n\n只有2种情况，`true`、`false`，表示真或假\n\n### undefined\n\n表示未定义，只有一种书写情况即`undefined`\n\n### null\n\n表示空，不存在\n\n### Symbol【符号类型】\n\n具有永不相等的特性，为ES6新增，具体在ES6中详解\n\n### Bigint\n\n支持更大范围的整数类型，为ES2020新增\n\n## 引用类型\n\n存放的是**内存地址**\n\n### object【对象类型】\n\n可以认为对象是由多个基本类型组合而成的\n\n```js\nvar user = {\n\tname: \"mikeahhui\",\n\tsex: \"man\",\n\tage: 18,\n\thaveGirlFriend: false,\n\n}\n```\n\n### function【函数】\n\n之后详解\n\n### 得到数据的类型\n\n使用`typeof`\n\n```\nconsole.log(typeof '嘿嘿'); // string\nconsole.log(typeof(123)); // number\n```\n\n## JS中的垃圾回收机制\n\n垃圾回收器，会定期的发现内存中无法访问的对象，该对象称为垃圾，垃圾回收器会自动在合适的时间将占用内存的内存释放掉\n","slug":"JS/2.数据类型","published":1,"updated":"2022-05-22T09:23:17.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvh9000704wcdj1f3knu","content":"<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"原始类型（基本类型）\"><a href=\"#原始类型（基本类型）\" class=\"headerlink\" title=\"原始类型（基本类型）\"></a>原始类型（基本类型）</h2><p>原始类型指不可再细分的类型，存放的是<strong>具体的值</strong></p>\n<h3 id=\"number【数字类型】\"><a href=\"#number【数字类型】\" class=\"headerlink\" title=\"number【数字类型】\"></a>number【数字类型】</h3><p>就是直接写一串数字，emmmmmm…..感觉说了一句废话~</p>\n<blockquote>\n<p>了解：</p>\n<p>数字类型可以加上前缀来表示不同的进制</p>\n<p>0：表示8进制</p>\n<p>0x：表示16进制</p>\n<p>0b：表示2进制</p>\n</blockquote>\n<h3 id=\"string【字符串类型】\"><a href=\"#string【字符串类型】\" class=\"headerlink\" title=\"string【字符串类型】\"></a>string【字符串类型】</h3><p>使用单引号（’）、双引号（”）、反引号（`）【tab键上面的那个键】包裹的内容即为字符串类型</p>\n<blockquote>\n<p>在字符串中，特殊符号可以使用转义符（/）来进行转义</p>\n</blockquote>\n<h3 id=\"boolean【布尔类型】\"><a href=\"#boolean【布尔类型】\" class=\"headerlink\" title=\"boolean【布尔类型】\"></a>boolean【布尔类型】</h3><p>只有2种情况，<code>true</code>、<code>false</code>，表示真或假</p>\n<h3 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h3><p>表示未定义，只有一种书写情况即<code>undefined</code></p>\n<h3 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h3><p>表示空，不存在</p>\n<h3 id=\"Symbol【符号类型】\"><a href=\"#Symbol【符号类型】\" class=\"headerlink\" title=\"Symbol【符号类型】\"></a>Symbol【符号类型】</h3><p>具有永不相等的特性，为ES6新增，具体在ES6中详解</p>\n<h3 id=\"Bigint\"><a href=\"#Bigint\" class=\"headerlink\" title=\"Bigint\"></a>Bigint</h3><p>支持更大范围的整数类型，为ES2020新增</p>\n<h2 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h2><p>存放的是<strong>内存地址</strong></p>\n<h3 id=\"object【对象类型】\"><a href=\"#object【对象类型】\" class=\"headerlink\" title=\"object【对象类型】\"></a>object【对象类型】</h3><p>可以认为对象是由多个基本类型组合而成的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;mikeahhui&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">sex</span>: <span class=\"string\">&quot;man&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">\t<span class=\"attr\">haveGirlFriend</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"function【函数】\"><a href=\"#function【函数】\" class=\"headerlink\" title=\"function【函数】\"></a>function【函数】</h3><p>之后详解</p>\n<h3 id=\"得到数据的类型\"><a href=\"#得到数据的类型\" class=\"headerlink\" title=\"得到数据的类型\"></a>得到数据的类型</h3><p>使用<code>typeof</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(typeof &#x27;嘿嘿&#x27;); // string</span><br><span class=\"line\">console.log(typeof(123)); // number</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JS中的垃圾回收机制\"><a href=\"#JS中的垃圾回收机制\" class=\"headerlink\" title=\"JS中的垃圾回收机制\"></a>JS中的垃圾回收机制</h2><p>垃圾回收器，会定期的发现内存中无法访问的对象，该对象称为垃圾，垃圾回收器会自动在合适的时间将占用内存的内存释放掉</p>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-3kqv3y.jpg","excerpt":"","more":"<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"原始类型（基本类型）\"><a href=\"#原始类型（基本类型）\" class=\"headerlink\" title=\"原始类型（基本类型）\"></a>原始类型（基本类型）</h2><p>原始类型指不可再细分的类型，存放的是<strong>具体的值</strong></p>\n<h3 id=\"number【数字类型】\"><a href=\"#number【数字类型】\" class=\"headerlink\" title=\"number【数字类型】\"></a>number【数字类型】</h3><p>就是直接写一串数字，emmmmmm…..感觉说了一句废话~</p>\n<blockquote>\n<p>了解：</p>\n<p>数字类型可以加上前缀来表示不同的进制</p>\n<p>0：表示8进制</p>\n<p>0x：表示16进制</p>\n<p>0b：表示2进制</p>\n</blockquote>\n<h3 id=\"string【字符串类型】\"><a href=\"#string【字符串类型】\" class=\"headerlink\" title=\"string【字符串类型】\"></a>string【字符串类型】</h3><p>使用单引号（’）、双引号（”）、反引号（`）【tab键上面的那个键】包裹的内容即为字符串类型</p>\n<blockquote>\n<p>在字符串中，特殊符号可以使用转义符（/）来进行转义</p>\n</blockquote>\n<h3 id=\"boolean【布尔类型】\"><a href=\"#boolean【布尔类型】\" class=\"headerlink\" title=\"boolean【布尔类型】\"></a>boolean【布尔类型】</h3><p>只有2种情况，<code>true</code>、<code>false</code>，表示真或假</p>\n<h3 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h3><p>表示未定义，只有一种书写情况即<code>undefined</code></p>\n<h3 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h3><p>表示空，不存在</p>\n<h3 id=\"Symbol【符号类型】\"><a href=\"#Symbol【符号类型】\" class=\"headerlink\" title=\"Symbol【符号类型】\"></a>Symbol【符号类型】</h3><p>具有永不相等的特性，为ES6新增，具体在ES6中详解</p>\n<h3 id=\"Bigint\"><a href=\"#Bigint\" class=\"headerlink\" title=\"Bigint\"></a>Bigint</h3><p>支持更大范围的整数类型，为ES2020新增</p>\n<h2 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h2><p>存放的是<strong>内存地址</strong></p>\n<h3 id=\"object【对象类型】\"><a href=\"#object【对象类型】\" class=\"headerlink\" title=\"object【对象类型】\"></a>object【对象类型】</h3><p>可以认为对象是由多个基本类型组合而成的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;mikeahhui&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">sex</span>: <span class=\"string\">&quot;man&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">\t<span class=\"attr\">haveGirlFriend</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"function【函数】\"><a href=\"#function【函数】\" class=\"headerlink\" title=\"function【函数】\"></a>function【函数】</h3><p>之后详解</p>\n<h3 id=\"得到数据的类型\"><a href=\"#得到数据的类型\" class=\"headerlink\" title=\"得到数据的类型\"></a>得到数据的类型</h3><p>使用<code>typeof</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(typeof &#x27;嘿嘿&#x27;); // string</span><br><span class=\"line\">console.log(typeof(123)); // number</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JS中的垃圾回收机制\"><a href=\"#JS中的垃圾回收机制\" class=\"headerlink\" title=\"JS中的垃圾回收机制\"></a>JS中的垃圾回收机制</h2><p>垃圾回收器，会定期的发现内存中无法访问的对象，该对象称为垃圾，垃圾回收器会自动在合适的时间将占用内存的内存释放掉</p>\n"},{"title":"前言","date":"2022-05-22T02:19:28.000Z","_content":"\n# 前言\n\n时间如白驹过隙，不知不觉间，已经有一年的工作经验了，遥想去年，刚从学校出来时，心怀一腔热血与对生活的不屑，总觉得工作是一件很简单的事情。后来，在一次一次的面试失败中，我逐渐认识到，原来生活并非表面上的那么轻松，最后凭着我在学校课余时间自学的一些前端基础，我到了现在的公司。从实习到转正再到现在，已经有一年多得工作经验，在这段时间里确实学到了很多很多的东西，但还差的很远很远。\n\n回首走过的路，我虽然学到了很多东西，但也忘记了很多的东西，所以决定将`JavaScript`复习一遍，整理一下笔记。生活虽然很苦😫，但我们可以很甜😀~加油，打工人💪！\n","source":"_posts/JS/1.前言.md","raw":"---\ntitle: 前言\ndate: 2022-05-22 10:19:28\ntags: JavaScript\ncategories:\n - JavaScript\n---\n\n# 前言\n\n时间如白驹过隙，不知不觉间，已经有一年的工作经验了，遥想去年，刚从学校出来时，心怀一腔热血与对生活的不屑，总觉得工作是一件很简单的事情。后来，在一次一次的面试失败中，我逐渐认识到，原来生活并非表面上的那么轻松，最后凭着我在学校课余时间自学的一些前端基础，我到了现在的公司。从实习到转正再到现在，已经有一年多得工作经验，在这段时间里确实学到了很多很多的东西，但还差的很远很远。\n\n回首走过的路，我虽然学到了很多东西，但也忘记了很多的东西，所以决定将`JavaScript`复习一遍，整理一下笔记。生活虽然很苦😫，但我们可以很甜😀~加油，打工人💪！\n","slug":"JS/1.前言","published":1,"updated":"2022-05-22T02:36:08.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvha000904wc8oy94iz3","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>时间如白驹过隙，不知不觉间，已经有一年的工作经验了，遥想去年，刚从学校出来时，心怀一腔热血与对生活的不屑，总觉得工作是一件很简单的事情。后来，在一次一次的面试失败中，我逐渐认识到，原来生活并非表面上的那么轻松，最后凭着我在学校课余时间自学的一些前端基础，我到了现在的公司。从实习到转正再到现在，已经有一年多得工作经验，在这段时间里确实学到了很多很多的东西，但还差的很远很远。</p>\n<p>回首走过的路，我虽然学到了很多东西，但也忘记了很多的东西，所以决定将<code>JavaScript</code>复习一遍，整理一下笔记。生活虽然很苦😫，但我们可以很甜😀~加油，打工人💪！</p>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-3kqv3y.jpg","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>时间如白驹过隙，不知不觉间，已经有一年的工作经验了，遥想去年，刚从学校出来时，心怀一腔热血与对生活的不屑，总觉得工作是一件很简单的事情。后来，在一次一次的面试失败中，我逐渐认识到，原来生活并非表面上的那么轻松，最后凭着我在学校课余时间自学的一些前端基础，我到了现在的公司。从实习到转正再到现在，已经有一年多得工作经验，在这段时间里确实学到了很多很多的东西，但还差的很远很远。</p>\n<p>回首走过的路，我虽然学到了很多东西，但也忘记了很多的东西，所以决定将<code>JavaScript</code>复习一遍，整理一下笔记。生活虽然很苦😫，但我们可以很甜😀~加油，打工人💪！</p>\n"},{"title":"使用第三方库简化流程","date":"2022-05-15T09:12:17.000Z","_content":"\n# 使用第三方库简化流程🎈\n\n## ts-node\n\n将`TS`在内存中完成编译，同时完成运行（不会生成编译文件）\n\n### 安装\n\n```\nnpm i -g ts-node\n```\n\n### 使用\n\n```\nts-node src/index.ts\n```\n\n## nodemon\n\n监测文件变化，自动运行\n\n### 安装\n\n```\nnpm i -D nodemon\n```\n\n### 使用\n\n```\nnodemon --exec ts-node src/index.ts\n```\n\n在`package.json`中配置\n\n```json\n\"scripts\": {\n\t\"server\": \"nodemon --watch src -e ts --exec ts-node src/index.ts\"\n    // --watch src 表示只监测src下面的文件\n    // -e ts 表示只监控扩展名为ts的文件\n}\n```\n\n建议流程👍：\n\n开发时：`nodemon`和`ts-node`同时使用\n\n打包时：`tsc`\n\n","source":"_posts/TS/使用第三方库简化流程.md","raw":"---\ntitle: 使用第三方库简化流程\ndate: 2022-05-15 17:12:17\ntags: TypeScript\ncategories:\n  - 前端\n  - TypeScript\n---\n\n# 使用第三方库简化流程🎈\n\n## ts-node\n\n将`TS`在内存中完成编译，同时完成运行（不会生成编译文件）\n\n### 安装\n\n```\nnpm i -g ts-node\n```\n\n### 使用\n\n```\nts-node src/index.ts\n```\n\n## nodemon\n\n监测文件变化，自动运行\n\n### 安装\n\n```\nnpm i -D nodemon\n```\n\n### 使用\n\n```\nnodemon --exec ts-node src/index.ts\n```\n\n在`package.json`中配置\n\n```json\n\"scripts\": {\n\t\"server\": \"nodemon --watch src -e ts --exec ts-node src/index.ts\"\n    // --watch src 表示只监测src下面的文件\n    // -e ts 表示只监控扩展名为ts的文件\n}\n```\n\n建议流程👍：\n\n开发时：`nodemon`和`ts-node`同时使用\n\n打包时：`tsc`\n\n","slug":"TS/使用第三方库简化流程","published":1,"updated":"2022-05-15T09:34:06.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvhb000b04wchbbbawwj","content":"<h1 id=\"使用第三方库简化流程🎈\"><a href=\"#使用第三方库简化流程🎈\" class=\"headerlink\" title=\"使用第三方库简化流程🎈\"></a>使用第三方库简化流程🎈</h1><h2 id=\"ts-node\"><a href=\"#ts-node\" class=\"headerlink\" title=\"ts-node\"></a>ts-node</h2><p>将<code>TS</code>在内存中完成编译，同时完成运行（不会生成编译文件）</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g ts-node</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ts-node src/index.ts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nodemon\"><a href=\"#nodemon\" class=\"headerlink\" title=\"nodemon\"></a>nodemon</h2><p>监测文件变化，自动运行</p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D nodemon</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodemon --exec ts-node src/index.ts</span><br></pre></td></tr></table></figure>\n\n<p>在<code>package.json</code>中配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;server&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;nodemon --watch src -e ts --exec ts-node src/index.ts&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// --watch src 表示只监测src下面的文件</span></span><br><span class=\"line\">    <span class=\"comment\">// -e ts 表示只监控扩展名为ts的文件</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>建议流程👍：</p>\n<p>开发时：<code>nodemon</code>和<code>ts-node</code>同时使用</p>\n<p>打包时：<code>tsc</code></p>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-2e7v1g.png","excerpt":"","more":"<h1 id=\"使用第三方库简化流程🎈\"><a href=\"#使用第三方库简化流程🎈\" class=\"headerlink\" title=\"使用第三方库简化流程🎈\"></a>使用第三方库简化流程🎈</h1><h2 id=\"ts-node\"><a href=\"#ts-node\" class=\"headerlink\" title=\"ts-node\"></a>ts-node</h2><p>将<code>TS</code>在内存中完成编译，同时完成运行（不会生成编译文件）</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g ts-node</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ts-node src/index.ts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nodemon\"><a href=\"#nodemon\" class=\"headerlink\" title=\"nodemon\"></a>nodemon</h2><p>监测文件变化，自动运行</p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D nodemon</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodemon --exec ts-node src/index.ts</span><br></pre></td></tr></table></figure>\n\n<p>在<code>package.json</code>中配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;server&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;nodemon --watch src -e ts --exec ts-node src/index.ts&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// --watch src 表示只监测src下面的文件</span></span><br><span class=\"line\">    <span class=\"comment\">// -e ts 表示只监控扩展名为ts的文件</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>建议流程👍：</p>\n<p>开发时：<code>nodemon</code>和<code>ts-node</code>同时使用</p>\n<p>打包时：<code>tsc</code></p>\n"},{"title":"TypeScript配置文件","date":"2022-05-07T12:31:41.000Z","_content":"\n# TypeScript配置文件⚙\n\n默认情况下，`TS`会做出以下假设\n\n- 假设当前执行的环境是`dom`\n- 如果代码中没有会用模块化语句（`import`、`export`），便认为该代码是全局执行\n- 编译的目标代码时`ES3`\n\n有两种方法可以更改以上假设:\n\n1. 使用`tsc`命令执行的时候，加上选项参数\n2. 使用`ts`配置文件，更改编译选项（推荐使用）\n\n`Ts`的配置文件为`tsconfig.json`，可直接创建，也可使用命令`tsc --init`创建\n\n```json\n{\n\t\"compilerOptions\": { // 编译选项\n        \"target\": \"es2016\",  // 编译目标代码的版本标准\n        \"module\": \"commonjs\", // 编译目标使用的模块化标准\n        \"lib\": ['es2016'], // 编译目标当前的环境/全局可使用的变量\n        \"outDir\": \"./dist\", // 输出目录\n        \"strictNullChecks\": true, // 不可将undefined和null赋值\n        \"removeComments\": true, // 表示编译的结果中移除注释\n        \"stricPropertyInitialization\": true, // 以更加严格的方式来检查值得初始化\n    },\n    \"include\": [\"./src\"], // 编译路径\n    \"files\": [\"./src/index.ts\"], // 编译单个文件及其依赖文件\n}\n```\n\n注意🔥:\n\n 1. 使用`TS`配置文件后，在使用`tsc`命令编译时，后面不能跟文件名，若跟了会忽略配置文件\n\n 2. `TS`默认没有`node`环境，所以需要安装`@types/node`，`@types`是一个官方的类型吗描述库，，其中包含了很多对`js`代码的类型描述\n\n    举个栗子🌰:\n\n    `JQuery`使用`JS`写的，但是`TS`默认没有对他的类型检查\n\n    安装`@types/jquery`为`jquery`库添加类型定义\n","source":"_posts/TS/TypeScript配置文件.md","raw":"---\ntitle: TypeScript配置文件\ndate: 2022-05-07 20:31:41\ntags: TypeScript\ncategories:\n  - 前端\n  - TypeScript\n---\n\n# TypeScript配置文件⚙\n\n默认情况下，`TS`会做出以下假设\n\n- 假设当前执行的环境是`dom`\n- 如果代码中没有会用模块化语句（`import`、`export`），便认为该代码是全局执行\n- 编译的目标代码时`ES3`\n\n有两种方法可以更改以上假设:\n\n1. 使用`tsc`命令执行的时候，加上选项参数\n2. 使用`ts`配置文件，更改编译选项（推荐使用）\n\n`Ts`的配置文件为`tsconfig.json`，可直接创建，也可使用命令`tsc --init`创建\n\n```json\n{\n\t\"compilerOptions\": { // 编译选项\n        \"target\": \"es2016\",  // 编译目标代码的版本标准\n        \"module\": \"commonjs\", // 编译目标使用的模块化标准\n        \"lib\": ['es2016'], // 编译目标当前的环境/全局可使用的变量\n        \"outDir\": \"./dist\", // 输出目录\n        \"strictNullChecks\": true, // 不可将undefined和null赋值\n        \"removeComments\": true, // 表示编译的结果中移除注释\n        \"stricPropertyInitialization\": true, // 以更加严格的方式来检查值得初始化\n    },\n    \"include\": [\"./src\"], // 编译路径\n    \"files\": [\"./src/index.ts\"], // 编译单个文件及其依赖文件\n}\n```\n\n注意🔥:\n\n 1. 使用`TS`配置文件后，在使用`tsc`命令编译时，后面不能跟文件名，若跟了会忽略配置文件\n\n 2. `TS`默认没有`node`环境，所以需要安装`@types/node`，`@types`是一个官方的类型吗描述库，，其中包含了很多对`js`代码的类型描述\n\n    举个栗子🌰:\n\n    `JQuery`使用`JS`写的，但是`TS`默认没有对他的类型检查\n\n    安装`@types/jquery`为`jquery`库添加类型定义\n","slug":"TS/TypeScript配置文件","published":1,"updated":"2022-05-07T12:38:42.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvhc000e04wcco31bd9b","content":"<h1 id=\"TypeScript配置文件⚙\"><a href=\"#TypeScript配置文件⚙\" class=\"headerlink\" title=\"TypeScript配置文件⚙\"></a>TypeScript配置文件⚙</h1><p>默认情况下，<code>TS</code>会做出以下假设</p>\n<ul>\n<li>假设当前执行的环境是<code>dom</code></li>\n<li>如果代码中没有会用模块化语句（<code>import</code>、<code>export</code>），便认为该代码是全局执行</li>\n<li>编译的目标代码时<code>ES3</code></li>\n</ul>\n<p>有两种方法可以更改以上假设:</p>\n<ol>\n<li>使用<code>tsc</code>命令执行的时候，加上选项参数</li>\n<li>使用<code>ts</code>配置文件，更改编译选项（推荐使用）</li>\n</ol>\n<p><code>Ts</code>的配置文件为<code>tsconfig.json</code>，可直接创建，也可使用命令<code>tsc --init</code>创建</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 编译选项</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;es2016&quot;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 编译目标代码的版本标准</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;commonjs&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 编译目标使用的模块化标准</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;lib&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>&#x27;es2016&#x27;<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 编译目标当前的环境/全局可使用的变量</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;outDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./dist&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 输出目录</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;strictNullChecks&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 不可将undefined和null赋值</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;removeComments&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 表示编译的结果中移除注释</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;stricPropertyInitialization&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 以更加严格的方式来检查值得初始化</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;include&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;./src&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 编译路径</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;files&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;./src/index.ts&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 编译单个文件及其依赖文件</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意🔥:</p>\n<ol>\n<li><p>使用<code>TS</code>配置文件后，在使用<code>tsc</code>命令编译时，后面不能跟文件名，若跟了会忽略配置文件</p>\n</li>\n<li><p><code>TS</code>默认没有<code>node</code>环境，所以需要安装<code>@types/node</code>，<code>@types</code>是一个官方的类型吗描述库，，其中包含了很多对<code>js</code>代码的类型描述</p>\n<p>举个栗子🌰:</p>\n<p><code>JQuery</code>使用<code>JS</code>写的，但是<code>TS</code>默认没有对他的类型检查</p>\n<p>安装<code>@types/jquery</code>为<code>jquery</code>库添加类型定义</p>\n</li>\n</ol>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-3kqv3y.jpg","excerpt":"","more":"<h1 id=\"TypeScript配置文件⚙\"><a href=\"#TypeScript配置文件⚙\" class=\"headerlink\" title=\"TypeScript配置文件⚙\"></a>TypeScript配置文件⚙</h1><p>默认情况下，<code>TS</code>会做出以下假设</p>\n<ul>\n<li>假设当前执行的环境是<code>dom</code></li>\n<li>如果代码中没有会用模块化语句（<code>import</code>、<code>export</code>），便认为该代码是全局执行</li>\n<li>编译的目标代码时<code>ES3</code></li>\n</ul>\n<p>有两种方法可以更改以上假设:</p>\n<ol>\n<li>使用<code>tsc</code>命令执行的时候，加上选项参数</li>\n<li>使用<code>ts</code>配置文件，更改编译选项（推荐使用）</li>\n</ol>\n<p><code>Ts</code>的配置文件为<code>tsconfig.json</code>，可直接创建，也可使用命令<code>tsc --init</code>创建</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 编译选项</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;es2016&quot;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 编译目标代码的版本标准</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;commonjs&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 编译目标使用的模块化标准</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;lib&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>&#x27;es2016&#x27;<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 编译目标当前的环境/全局可使用的变量</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;outDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./dist&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 输出目录</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;strictNullChecks&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 不可将undefined和null赋值</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;removeComments&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 表示编译的结果中移除注释</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;stricPropertyInitialization&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 以更加严格的方式来检查值得初始化</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;include&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;./src&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 编译路径</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;files&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;./src/index.ts&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 编译单个文件及其依赖文件</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意🔥:</p>\n<ol>\n<li><p>使用<code>TS</code>配置文件后，在使用<code>tsc</code>命令编译时，后面不能跟文件名，若跟了会忽略配置文件</p>\n</li>\n<li><p><code>TS</code>默认没有<code>node</code>环境，所以需要安装<code>@types/node</code>，<code>@types</code>是一个官方的类型吗描述库，，其中包含了很多对<code>js</code>代码的类型描述</p>\n<p>举个栗子🌰:</p>\n<p><code>JQuery</code>使用<code>JS</code>写的，但是<code>TS</code>默认没有对他的类型检查</p>\n<p>安装<code>@types/jquery</code>为<code>jquery</code>库添加类型定义</p>\n</li>\n</ol>\n"},{"title":"变量","date":"2022-05-22T08:05:45.000Z","_content":"\n# 变量\n\n## 什么是变量？\n\n变量是一块内存空间，用于保存数据\n\n## 使用变量\n\n1. 声明（定义）变量\n\n```js\n// var 变量名;\nvar user;\nuser = 'xx';\n```\n\n**变量声明后若未赋值则值为`undefined`**\n\n2. 变量的赋值\n\n向变量的内存空间存放数据\n\n- 变量的值是可变的\n\n变量可以被重新赋值，新的值会覆盖原来的值\n\n- 变量的名称\n\nemmmmmmmmmm....没啥好说的，懂得都懂，就一句话，将变量命名为a、b、c...的都是\"小可爱\"!😛\n\n- 声明和赋值\n\n可以在声明的时候直接给变量赋值\n\n```js\nvar user = 'xx';  // 与先声明再赋值没有任何区别，只是一种语法糖，方便书写而已~\n```\n\n> 值得注意的地方：\n>\n> - **任何可以书写数据的地方，都可以书写变量**\n>\n> - 若使用一个未声明的变量，会导致报错\n>\n> - **Js中存在变量提升**\n>\n>   所有变量的声明，会自动提到代码的最顶端\n>\n>   这种提升不会超越脚本块\n>\n> - 允许定义多个同名变量（这么做的都是”小可爱“）\n>\n>   多个同名变量最终会提升未一个，后面的覆盖前面的\n\n## 在变量中存放对象\n\n### 通过变量读取对象中的某个属性\n\n```js\n// 变量名.属性名\nuser.naem;\n```\n\n- 当读取的属性不存在时，会得到`undefined`，程序不会报错\n- 当读取属性的对象不存时，程序报错\n\n### 通过变量更改对象中的某个属性\n\n```js\nvar user = {\n\tname: \"yyy\",\n}\nuser.name = 'xxx';\n```\n\n**放赋值的属性不存在时，会添加属性**\n\n### 删除属性\n\n```js\n// delete 变量名.属性名\ndelete user.name;\n```\n\n### 属性表达式\n\n给属性赋值或读取属性时，可以使用下面的格式操作\n\n```js\n// 对象变量[\"属性名\"];\nuser[\"name\"];\n```\n\n以`.`调用的任何情况属性表达式都可以代替，但是`.`调用却做不到一些属性表达式的能做到的事\n\n```js\nuser[\"?\"];\nfunction getUserProp(prop) {\n\treturn user[prop];\n};\n```\n\n**属性的名字只能是字符串，如果写的是数字，则会自动转换为字符串类型的数字**\n\n### 全局对象\n\nJs大部分宿主环境都会提供一个特殊的对象，该对象可以直接在Js代码中访问，该对象叫做全局对象\n\n在浏览器环境中，全局对象为`window`，表示整个窗口\n\n全局对象中的所有属性，可以直接使用，而不需要协商全局对象名（window可以省略）\n\n**开发者定义的变量实际上会成为`window`对象的属性**\n\n**如果变量没有被赋值，则该变量不会覆盖`window`对象上的同名属性**\n","source":"_posts/JS/3.变量.md","raw":"---\ntitle: 变量\ndate: 2022-05-22 16:05:45\ntags: JavaScript\ncategories:\n - JavaScript\n---\n\n# 变量\n\n## 什么是变量？\n\n变量是一块内存空间，用于保存数据\n\n## 使用变量\n\n1. 声明（定义）变量\n\n```js\n// var 变量名;\nvar user;\nuser = 'xx';\n```\n\n**变量声明后若未赋值则值为`undefined`**\n\n2. 变量的赋值\n\n向变量的内存空间存放数据\n\n- 变量的值是可变的\n\n变量可以被重新赋值，新的值会覆盖原来的值\n\n- 变量的名称\n\nemmmmmmmmmm....没啥好说的，懂得都懂，就一句话，将变量命名为a、b、c...的都是\"小可爱\"!😛\n\n- 声明和赋值\n\n可以在声明的时候直接给变量赋值\n\n```js\nvar user = 'xx';  // 与先声明再赋值没有任何区别，只是一种语法糖，方便书写而已~\n```\n\n> 值得注意的地方：\n>\n> - **任何可以书写数据的地方，都可以书写变量**\n>\n> - 若使用一个未声明的变量，会导致报错\n>\n> - **Js中存在变量提升**\n>\n>   所有变量的声明，会自动提到代码的最顶端\n>\n>   这种提升不会超越脚本块\n>\n> - 允许定义多个同名变量（这么做的都是”小可爱“）\n>\n>   多个同名变量最终会提升未一个，后面的覆盖前面的\n\n## 在变量中存放对象\n\n### 通过变量读取对象中的某个属性\n\n```js\n// 变量名.属性名\nuser.naem;\n```\n\n- 当读取的属性不存在时，会得到`undefined`，程序不会报错\n- 当读取属性的对象不存时，程序报错\n\n### 通过变量更改对象中的某个属性\n\n```js\nvar user = {\n\tname: \"yyy\",\n}\nuser.name = 'xxx';\n```\n\n**放赋值的属性不存在时，会添加属性**\n\n### 删除属性\n\n```js\n// delete 变量名.属性名\ndelete user.name;\n```\n\n### 属性表达式\n\n给属性赋值或读取属性时，可以使用下面的格式操作\n\n```js\n// 对象变量[\"属性名\"];\nuser[\"name\"];\n```\n\n以`.`调用的任何情况属性表达式都可以代替，但是`.`调用却做不到一些属性表达式的能做到的事\n\n```js\nuser[\"?\"];\nfunction getUserProp(prop) {\n\treturn user[prop];\n};\n```\n\n**属性的名字只能是字符串，如果写的是数字，则会自动转换为字符串类型的数字**\n\n### 全局对象\n\nJs大部分宿主环境都会提供一个特殊的对象，该对象可以直接在Js代码中访问，该对象叫做全局对象\n\n在浏览器环境中，全局对象为`window`，表示整个窗口\n\n全局对象中的所有属性，可以直接使用，而不需要协商全局对象名（window可以省略）\n\n**开发者定义的变量实际上会成为`window`对象的属性**\n\n**如果变量没有被赋值，则该变量不会覆盖`window`对象上的同名属性**\n","slug":"JS/3.变量","published":1,"updated":"2022-05-22T09:28:00.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvhd000f04wc85gb1yin","content":"<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><h2 id=\"什么是变量？\"><a href=\"#什么是变量？\" class=\"headerlink\" title=\"什么是变量？\"></a>什么是变量？</h2><p>变量是一块内存空间，用于保存数据</p>\n<h2 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h2><ol>\n<li>声明（定义）变量</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var 变量名;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user;</span><br><span class=\"line\">user = <span class=\"string\">&#x27;xx&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>变量声明后若未赋值则值为<code>undefined</code></strong></p>\n<ol start=\"2\">\n<li>变量的赋值</li>\n</ol>\n<p>向变量的内存空间存放数据</p>\n<ul>\n<li>变量的值是可变的</li>\n</ul>\n<p>变量可以被重新赋值，新的值会覆盖原来的值</p>\n<ul>\n<li>变量的名称</li>\n</ul>\n<p>emmmmmmmmmm….没啥好说的，懂得都懂，就一句话，将变量命名为a、b、c…的都是”小可爱”!😛</p>\n<ul>\n<li>声明和赋值</li>\n</ul>\n<p>可以在声明的时候直接给变量赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"string\">&#x27;xx&#x27;</span>;  <span class=\"comment\">// 与先声明再赋值没有任何区别，只是一种语法糖，方便书写而已~</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>值得注意的地方：</p>\n<ul>\n<li><p><strong>任何可以书写数据的地方，都可以书写变量</strong></p>\n</li>\n<li><p>若使用一个未声明的变量，会导致报错</p>\n</li>\n<li><p><strong>Js中存在变量提升</strong></p>\n<p>所有变量的声明，会自动提到代码的最顶端</p>\n<p>这种提升不会超越脚本块</p>\n</li>\n<li><p>允许定义多个同名变量（这么做的都是”小可爱“）</p>\n<p>多个同名变量最终会提升未一个，后面的覆盖前面的</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"在变量中存放对象\"><a href=\"#在变量中存放对象\" class=\"headerlink\" title=\"在变量中存放对象\"></a>在变量中存放对象</h2><h3 id=\"通过变量读取对象中的某个属性\"><a href=\"#通过变量读取对象中的某个属性\" class=\"headerlink\" title=\"通过变量读取对象中的某个属性\"></a>通过变量读取对象中的某个属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量名.属性名</span></span><br><span class=\"line\">user.<span class=\"property\">naem</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当读取的属性不存在时，会得到<code>undefined</code>，程序不会报错</li>\n<li>当读取属性的对象不存时，程序报错</li>\n</ul>\n<h3 id=\"通过变量更改对象中的某个属性\"><a href=\"#通过变量更改对象中的某个属性\" class=\"headerlink\" title=\"通过变量更改对象中的某个属性\"></a>通过变量更改对象中的某个属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;yyy&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">user.<span class=\"property\">name</span> = <span class=\"string\">&#x27;xxx&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>放赋值的属性不存在时，会添加属性</strong></p>\n<h3 id=\"删除属性\"><a href=\"#删除属性\" class=\"headerlink\" title=\"删除属性\"></a>删除属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// delete 变量名.属性名</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> user.<span class=\"property\">name</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性表达式\"><a href=\"#属性表达式\" class=\"headerlink\" title=\"属性表达式\"></a>属性表达式</h3><p>给属性赋值或读取属性时，可以使用下面的格式操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象变量[&quot;属性名&quot;];</span></span><br><span class=\"line\">user[<span class=\"string\">&quot;name&quot;</span>];</span><br></pre></td></tr></table></figure>\n\n<p>以<code>.</code>调用的任何情况属性表达式都可以代替，但是<code>.</code>调用却做不到一些属性表达式的能做到的事</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user[<span class=\"string\">&quot;?&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getUserProp</span>(<span class=\"params\">prop</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> user[prop];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>属性的名字只能是字符串，如果写的是数字，则会自动转换为字符串类型的数字</strong></p>\n<h3 id=\"全局对象\"><a href=\"#全局对象\" class=\"headerlink\" title=\"全局对象\"></a>全局对象</h3><p>Js大部分宿主环境都会提供一个特殊的对象，该对象可以直接在Js代码中访问，该对象叫做全局对象</p>\n<p>在浏览器环境中，全局对象为<code>window</code>，表示整个窗口</p>\n<p>全局对象中的所有属性，可以直接使用，而不需要协商全局对象名（window可以省略）</p>\n<p><strong>开发者定义的变量实际上会成为<code>window</code>对象的属性</strong></p>\n<p><strong>如果变量没有被赋值，则该变量不会覆盖<code>window</code>对象上的同名属性</strong></p>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-0prgo3.jpg","excerpt":"","more":"<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><h2 id=\"什么是变量？\"><a href=\"#什么是变量？\" class=\"headerlink\" title=\"什么是变量？\"></a>什么是变量？</h2><p>变量是一块内存空间，用于保存数据</p>\n<h2 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h2><ol>\n<li>声明（定义）变量</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var 变量名;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user;</span><br><span class=\"line\">user = <span class=\"string\">&#x27;xx&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>变量声明后若未赋值则值为<code>undefined</code></strong></p>\n<ol start=\"2\">\n<li>变量的赋值</li>\n</ol>\n<p>向变量的内存空间存放数据</p>\n<ul>\n<li>变量的值是可变的</li>\n</ul>\n<p>变量可以被重新赋值，新的值会覆盖原来的值</p>\n<ul>\n<li>变量的名称</li>\n</ul>\n<p>emmmmmmmmmm….没啥好说的，懂得都懂，就一句话，将变量命名为a、b、c…的都是”小可爱”!😛</p>\n<ul>\n<li>声明和赋值</li>\n</ul>\n<p>可以在声明的时候直接给变量赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"string\">&#x27;xx&#x27;</span>;  <span class=\"comment\">// 与先声明再赋值没有任何区别，只是一种语法糖，方便书写而已~</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>值得注意的地方：</p>\n<ul>\n<li><p><strong>任何可以书写数据的地方，都可以书写变量</strong></p>\n</li>\n<li><p>若使用一个未声明的变量，会导致报错</p>\n</li>\n<li><p><strong>Js中存在变量提升</strong></p>\n<p>所有变量的声明，会自动提到代码的最顶端</p>\n<p>这种提升不会超越脚本块</p>\n</li>\n<li><p>允许定义多个同名变量（这么做的都是”小可爱“）</p>\n<p>多个同名变量最终会提升未一个，后面的覆盖前面的</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"在变量中存放对象\"><a href=\"#在变量中存放对象\" class=\"headerlink\" title=\"在变量中存放对象\"></a>在变量中存放对象</h2><h3 id=\"通过变量读取对象中的某个属性\"><a href=\"#通过变量读取对象中的某个属性\" class=\"headerlink\" title=\"通过变量读取对象中的某个属性\"></a>通过变量读取对象中的某个属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量名.属性名</span></span><br><span class=\"line\">user.<span class=\"property\">naem</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当读取的属性不存在时，会得到<code>undefined</code>，程序不会报错</li>\n<li>当读取属性的对象不存时，程序报错</li>\n</ul>\n<h3 id=\"通过变量更改对象中的某个属性\"><a href=\"#通过变量更改对象中的某个属性\" class=\"headerlink\" title=\"通过变量更改对象中的某个属性\"></a>通过变量更改对象中的某个属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;yyy&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">user.<span class=\"property\">name</span> = <span class=\"string\">&#x27;xxx&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>放赋值的属性不存在时，会添加属性</strong></p>\n<h3 id=\"删除属性\"><a href=\"#删除属性\" class=\"headerlink\" title=\"删除属性\"></a>删除属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// delete 变量名.属性名</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> user.<span class=\"property\">name</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性表达式\"><a href=\"#属性表达式\" class=\"headerlink\" title=\"属性表达式\"></a>属性表达式</h3><p>给属性赋值或读取属性时，可以使用下面的格式操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象变量[&quot;属性名&quot;];</span></span><br><span class=\"line\">user[<span class=\"string\">&quot;name&quot;</span>];</span><br></pre></td></tr></table></figure>\n\n<p>以<code>.</code>调用的任何情况属性表达式都可以代替，但是<code>.</code>调用却做不到一些属性表达式的能做到的事</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user[<span class=\"string\">&quot;?&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getUserProp</span>(<span class=\"params\">prop</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> user[prop];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>属性的名字只能是字符串，如果写的是数字，则会自动转换为字符串类型的数字</strong></p>\n<h3 id=\"全局对象\"><a href=\"#全局对象\" class=\"headerlink\" title=\"全局对象\"></a>全局对象</h3><p>Js大部分宿主环境都会提供一个特殊的对象，该对象可以直接在Js代码中访问，该对象叫做全局对象</p>\n<p>在浏览器环境中，全局对象为<code>window</code>，表示整个窗口</p>\n<p>全局对象中的所有属性，可以直接使用，而不需要协商全局对象名（window可以省略）</p>\n<p><strong>开发者定义的变量实际上会成为<code>window</code>对象的属性</strong></p>\n<p><strong>如果变量没有被赋值，则该变量不会覆盖<code>window</code>对象上的同名属性</strong></p>\n"},{"title":"壁纸","date":"2022-05-06T00:30:22.000Z","_content":"{% gallery %}\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-015er3.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-0j1xm0.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-0prgo3.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-2e7v1g.png)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-2ew3pm.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-3kqv3y.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-45x55n.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-48y7wy.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-49q5dk.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-4l5j3r.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-4ve76m.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-72rxqo.jpg)\n{% endgallery %}","source":"_posts/Life/wallpaper.md","raw":"---\ntitle: 壁纸\ndate: 2022-05-06 08:30:22\ntags: wallpaper\n---\n{% gallery %}\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-015er3.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-0j1xm0.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-0prgo3.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-2e7v1g.png)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-2ew3pm.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-3kqv3y.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-45x55n.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-48y7wy.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-49q5dk.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-4l5j3r.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-4ve76m.jpg)\n![](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-72rxqo.jpg)\n{% endgallery %}","slug":"Life/wallpaper","published":1,"updated":"2022-05-07T12:12:03.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvhf000i04wcezgceozi","content":"<div class=\"fj-gallery\"><p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-015er3.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-0j1xm0.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-0prgo3.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-2e7v1g.png\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-2ew3pm.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-3kqv3y.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-45x55n.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-48y7wy.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-49q5dk.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-4l5j3r.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-4ve76m.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-72rxqo.jpg\"></p>\n          </div>","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-2e7v1g.png","excerpt":"","more":"<div class=\"fj-gallery\"><p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-015er3.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-0j1xm0.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-0prgo3.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-2e7v1g.png\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-2ew3pm.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-3kqv3y.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-45x55n.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-48y7wy.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-49q5dk.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-4l5j3r.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-4ve76m.jpg\"><br><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-72rxqo.jpg\"></p>\n          </div>"},{"title":"typora使用图床","date":"2022-05-04T13:44:10.000Z","_content":"# 在`typora`中使用图床\n\n## 图床是什么？\n\n图床是在互联网中存储图片的空间，其实就是云存储图片🐶\n\n## 为什么要使用图床？\n\n1. 减轻服务器的压力\n\n2. 便于文件的迁移\n\n   举个例子🌰\n\n   ![image-20220504220205797](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504220205797.png)\n\n   这个狗狗🐕在我的电脑是可以正常显示的，但是当我换一台电脑呢？显而易见，肯定是加载不出来的。\n\n   这就有了图床的用武之地，如果我们用图床，这个问题就会迎刃而解。（如下图）\n\n   ![image-20220504220606770](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504220606770.png)\n\n## 图床的获取\n\n目前国内有很多图床，如`smms`、`腾讯云COS`、`GitHub图床`、`七牛图床`、`阿里云图床`等。有收费的，也有免费的。\n\n我使用了`腾讯云COS`,它免费赠送了`50G`的空间，马哥这点还是挺良心的，嘿嘿。\n\n以下为腾讯云的例子\n\n![image-20220504221315971](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221315971.png)\n\n![image-20220504221508711](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221508711.png)\n\n![image-20220504221532851](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221532851.png)\n\n![image-20220504221737782](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221737782.png)\n\n![image-20220504221823359](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221823359.png)\n\n![image-20220504221843163](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221843163.png)\n\n## 在typroa中使用图床\n\n1. 首先我们要下载`Picgo`，并对其进行配置\n\n![image-20220504222436647](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504222436647.png)\n\n> - 版本需要为v5\n>\n> - `SecretId`和`SecretKey`可以在`https://console.cloud.tencent.com/cam/capi`查看（第一次进入是没有的，可以自行创建）。\n\n要想上传成功，`PicGo`的端口必须和`Typora`的一致\n\n![image-20220504222743593](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504222743593.png)\n\n2. 配置`Typora`\n\n   ![image-20220504223256805](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504223256805.png)\n\n出现以下情况即为上传成功~\n\n![image-20220504223329966](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504223329966.png)\n\n在`Typora`插入图片后，右键 ---> 上传图片  --->  链接自动替换为图床路径\n\n造就完了，兄弟~","source":"_posts/Life/typora使用图床.md","raw":"---\ntitle: typora使用图床\ndate: 2022-05-04 21:44:10\ntags: typora\n---\n# 在`typora`中使用图床\n\n## 图床是什么？\n\n图床是在互联网中存储图片的空间，其实就是云存储图片🐶\n\n## 为什么要使用图床？\n\n1. 减轻服务器的压力\n\n2. 便于文件的迁移\n\n   举个例子🌰\n\n   ![image-20220504220205797](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504220205797.png)\n\n   这个狗狗🐕在我的电脑是可以正常显示的，但是当我换一台电脑呢？显而易见，肯定是加载不出来的。\n\n   这就有了图床的用武之地，如果我们用图床，这个问题就会迎刃而解。（如下图）\n\n   ![image-20220504220606770](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504220606770.png)\n\n## 图床的获取\n\n目前国内有很多图床，如`smms`、`腾讯云COS`、`GitHub图床`、`七牛图床`、`阿里云图床`等。有收费的，也有免费的。\n\n我使用了`腾讯云COS`,它免费赠送了`50G`的空间，马哥这点还是挺良心的，嘿嘿。\n\n以下为腾讯云的例子\n\n![image-20220504221315971](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221315971.png)\n\n![image-20220504221508711](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221508711.png)\n\n![image-20220504221532851](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221532851.png)\n\n![image-20220504221737782](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221737782.png)\n\n![image-20220504221823359](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221823359.png)\n\n![image-20220504221843163](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221843163.png)\n\n## 在typroa中使用图床\n\n1. 首先我们要下载`Picgo`，并对其进行配置\n\n![image-20220504222436647](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504222436647.png)\n\n> - 版本需要为v5\n>\n> - `SecretId`和`SecretKey`可以在`https://console.cloud.tencent.com/cam/capi`查看（第一次进入是没有的，可以自行创建）。\n\n要想上传成功，`PicGo`的端口必须和`Typora`的一致\n\n![image-20220504222743593](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504222743593.png)\n\n2. 配置`Typora`\n\n   ![image-20220504223256805](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504223256805.png)\n\n出现以下情况即为上传成功~\n\n![image-20220504223329966](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504223329966.png)\n\n在`Typora`插入图片后，右键 ---> 上传图片  --->  链接自动替换为图床路径\n\n造就完了，兄弟~","slug":"Life/typora使用图床","published":1,"updated":"2022-05-04T14:36:20.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvhj000o04wcfeg183qa","content":"<h1 id=\"在typora中使用图床\"><a href=\"#在typora中使用图床\" class=\"headerlink\" title=\"在typora中使用图床\"></a>在<code>typora</code>中使用图床</h1><h2 id=\"图床是什么？\"><a href=\"#图床是什么？\" class=\"headerlink\" title=\"图床是什么？\"></a>图床是什么？</h2><p>图床是在互联网中存储图片的空间，其实就是云存储图片🐶</p>\n<h2 id=\"为什么要使用图床？\"><a href=\"#为什么要使用图床？\" class=\"headerlink\" title=\"为什么要使用图床？\"></a>为什么要使用图床？</h2><ol>\n<li><p>减轻服务器的压力</p>\n</li>\n<li><p>便于文件的迁移</p>\n<p>举个例子🌰</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504220205797.png\" alt=\"image-20220504220205797\"></p>\n<p>这个狗狗🐕在我的电脑是可以正常显示的，但是当我换一台电脑呢？显而易见，肯定是加载不出来的。</p>\n<p>这就有了图床的用武之地，如果我们用图床，这个问题就会迎刃而解。（如下图）</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504220606770.png\" alt=\"image-20220504220606770\"></p>\n</li>\n</ol>\n<h2 id=\"图床的获取\"><a href=\"#图床的获取\" class=\"headerlink\" title=\"图床的获取\"></a>图床的获取</h2><p>目前国内有很多图床，如<code>smms</code>、<code>腾讯云COS</code>、<code>GitHub图床</code>、<code>七牛图床</code>、<code>阿里云图床</code>等。有收费的，也有免费的。</p>\n<p>我使用了<code>腾讯云COS</code>,它免费赠送了<code>50G</code>的空间，马哥这点还是挺良心的，嘿嘿。</p>\n<p>以下为腾讯云的例子</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221315971.png\" alt=\"image-20220504221315971\"></p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221508711.png\" alt=\"image-20220504221508711\"></p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221532851.png\" alt=\"image-20220504221532851\"></p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221737782.png\" alt=\"image-20220504221737782\"></p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221823359.png\" alt=\"image-20220504221823359\"></p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221843163.png\" alt=\"image-20220504221843163\"></p>\n<h2 id=\"在typroa中使用图床\"><a href=\"#在typroa中使用图床\" class=\"headerlink\" title=\"在typroa中使用图床\"></a>在typroa中使用图床</h2><ol>\n<li>首先我们要下载<code>Picgo</code>，并对其进行配置</li>\n</ol>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504222436647.png\" alt=\"image-20220504222436647\"></p>\n<blockquote>\n<ul>\n<li><p>版本需要为v5</p>\n</li>\n<li><p><code>SecretId</code>和<code>SecretKey</code>可以在<code>https://console.cloud.tencent.com/cam/capi</code>查看（第一次进入是没有的，可以自行创建）。</p>\n</li>\n</ul>\n</blockquote>\n<p>要想上传成功，<code>PicGo</code>的端口必须和<code>Typora</code>的一致</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504222743593.png\" alt=\"image-20220504222743593\"></p>\n<ol start=\"2\">\n<li><p>配置<code>Typora</code></p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504223256805.png\" alt=\"image-20220504223256805\"></p>\n</li>\n</ol>\n<p>出现以下情况即为上传成功~</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504223329966.png\" alt=\"image-20220504223329966\"></p>\n<p>在<code>Typora</code>插入图片后，右键 —&gt; 上传图片  —&gt;  链接自动替换为图床路径</p>\n<p>造就完了，兄弟~</p>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-4ve76m.jpg","excerpt":"","more":"<h1 id=\"在typora中使用图床\"><a href=\"#在typora中使用图床\" class=\"headerlink\" title=\"在typora中使用图床\"></a>在<code>typora</code>中使用图床</h1><h2 id=\"图床是什么？\"><a href=\"#图床是什么？\" class=\"headerlink\" title=\"图床是什么？\"></a>图床是什么？</h2><p>图床是在互联网中存储图片的空间，其实就是云存储图片🐶</p>\n<h2 id=\"为什么要使用图床？\"><a href=\"#为什么要使用图床？\" class=\"headerlink\" title=\"为什么要使用图床？\"></a>为什么要使用图床？</h2><ol>\n<li><p>减轻服务器的压力</p>\n</li>\n<li><p>便于文件的迁移</p>\n<p>举个例子🌰</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504220205797.png\" alt=\"image-20220504220205797\"></p>\n<p>这个狗狗🐕在我的电脑是可以正常显示的，但是当我换一台电脑呢？显而易见，肯定是加载不出来的。</p>\n<p>这就有了图床的用武之地，如果我们用图床，这个问题就会迎刃而解。（如下图）</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504220606770.png\" alt=\"image-20220504220606770\"></p>\n</li>\n</ol>\n<h2 id=\"图床的获取\"><a href=\"#图床的获取\" class=\"headerlink\" title=\"图床的获取\"></a>图床的获取</h2><p>目前国内有很多图床，如<code>smms</code>、<code>腾讯云COS</code>、<code>GitHub图床</code>、<code>七牛图床</code>、<code>阿里云图床</code>等。有收费的，也有免费的。</p>\n<p>我使用了<code>腾讯云COS</code>,它免费赠送了<code>50G</code>的空间，马哥这点还是挺良心的，嘿嘿。</p>\n<p>以下为腾讯云的例子</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221315971.png\" alt=\"image-20220504221315971\"></p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221508711.png\" alt=\"image-20220504221508711\"></p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221532851.png\" alt=\"image-20220504221532851\"></p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221737782.png\" alt=\"image-20220504221737782\"></p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221823359.png\" alt=\"image-20220504221823359\"></p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504221843163.png\" alt=\"image-20220504221843163\"></p>\n<h2 id=\"在typroa中使用图床\"><a href=\"#在typroa中使用图床\" class=\"headerlink\" title=\"在typroa中使用图床\"></a>在typroa中使用图床</h2><ol>\n<li>首先我们要下载<code>Picgo</code>，并对其进行配置</li>\n</ol>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504222436647.png\" alt=\"image-20220504222436647\"></p>\n<blockquote>\n<ul>\n<li><p>版本需要为v5</p>\n</li>\n<li><p><code>SecretId</code>和<code>SecretKey</code>可以在<code>https://console.cloud.tencent.com/cam/capi</code>查看（第一次进入是没有的，可以自行创建）。</p>\n</li>\n</ul>\n</blockquote>\n<p>要想上传成功，<code>PicGo</code>的端口必须和<code>Typora</code>的一致</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504222743593.png\" alt=\"image-20220504222743593\"></p>\n<ol start=\"2\">\n<li><p>配置<code>Typora</code></p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504223256805.png\" alt=\"image-20220504223256805\"></p>\n</li>\n</ol>\n<p>出现以下情况即为上传成功~</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220504223329966.png\" alt=\"image-20220504223329966\"></p>\n<p>在<code>Typora</code>插入图片后，右键 —&gt; 上传图片  —&gt;  链接自动替换为图床路径</p>\n<p>造就完了，兄弟~</p>\n"},{"title":"认识微信小程序的基本设置","date":"2022-06-09T10:45:50.000Z","_content":"\n\n# 认识微信小程序的基本设置\n\n## 文件类型\n\n<div>\n\t<img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220609184814148.png\" />    \n</div>\n\n以上为微信小程序的结构目录\n\n微信小程序的文件类型有: `.js`、`wxml`、`wxss`、`json`\n\n结合`web`前端来看可以方便更好理解\n\n- `wxml` ---> `html`\n- `wxss` ---> `css`\n- `js` ---> `js` （emmmmmm……😄）\n- `json` ---> `json`（就是一个普通的`json`文件……）\n\n## 配置文件\n\n`json`文件为页面的配置文件，`app.json`为全局配置文件，当我们生成页面的时候也会生成`json`文件，这个生成的`json`文件是当前页面的配置文件，其中的配置优先级高于全局的`app.json`配置文件，有冲突的会覆盖`app.json`中的配置，当然，`app.json`的配置与页面的`json`文件也有所不同\n\n`app.json`的一些基础配置\n\n```json\n{\n  // 页面的路径配置，有点类似vue的route \n  \"pages\":[ \n    \"pages/index/index\",\n    \"pages/logs/logs\"\n  ],\n  // 用于控制窗口的样式\n  \"window\":{\n    \"backgroundTextStyle\":\"light\",\n    \"navigationBarBackgroundColor\": \"#fff\",\n    \"navigationBarTitleText\": \"Weixin啊\",\n    \"navigationBarTextStyle\":\"black\"\n  },\n  // 表示启动新版的组件样式\n  \"style\": \"v2\",\n  // 站内搜索的配置\n  \"sitemapLocation\": \"sitemap.json\"\n}\n```\n\n页面的配置\n\n```json\n// 还未学到，待补充\n```\n\n## 页面的创建\n\n1. 直接在`pages`下创建对应的`js json wxml wxss`文件\n2. 在`app.json`中的`pages`下创建路径，然后点击编译自动创建\n3. 在`pages`上右键选择`新建Page`，输入名称后自动创建对应的`js json wxml wxss`文件\n\n","source":"_posts/微信小程序/1.认识微信小程序的基本设置.md","raw":"---\ntitle: 认识微信小程序的基本设置\ndate: 2022-06-09 18:45:50\ntags: 微信小程序\ncategories:\n - 微信小程序 \n---\n\n\n# 认识微信小程序的基本设置\n\n## 文件类型\n\n<div>\n\t<img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220609184814148.png\" />    \n</div>\n\n以上为微信小程序的结构目录\n\n微信小程序的文件类型有: `.js`、`wxml`、`wxss`、`json`\n\n结合`web`前端来看可以方便更好理解\n\n- `wxml` ---> `html`\n- `wxss` ---> `css`\n- `js` ---> `js` （emmmmmm……😄）\n- `json` ---> `json`（就是一个普通的`json`文件……）\n\n## 配置文件\n\n`json`文件为页面的配置文件，`app.json`为全局配置文件，当我们生成页面的时候也会生成`json`文件，这个生成的`json`文件是当前页面的配置文件，其中的配置优先级高于全局的`app.json`配置文件，有冲突的会覆盖`app.json`中的配置，当然，`app.json`的配置与页面的`json`文件也有所不同\n\n`app.json`的一些基础配置\n\n```json\n{\n  // 页面的路径配置，有点类似vue的route \n  \"pages\":[ \n    \"pages/index/index\",\n    \"pages/logs/logs\"\n  ],\n  // 用于控制窗口的样式\n  \"window\":{\n    \"backgroundTextStyle\":\"light\",\n    \"navigationBarBackgroundColor\": \"#fff\",\n    \"navigationBarTitleText\": \"Weixin啊\",\n    \"navigationBarTextStyle\":\"black\"\n  },\n  // 表示启动新版的组件样式\n  \"style\": \"v2\",\n  // 站内搜索的配置\n  \"sitemapLocation\": \"sitemap.json\"\n}\n```\n\n页面的配置\n\n```json\n// 还未学到，待补充\n```\n\n## 页面的创建\n\n1. 直接在`pages`下创建对应的`js json wxml wxss`文件\n2. 在`app.json`中的`pages`下创建路径，然后点击编译自动创建\n3. 在`pages`上右键选择`新建Page`，输入名称后自动创建对应的`js json wxml wxss`文件\n\n","slug":"微信小程序/1.认识微信小程序的基本设置","published":1,"updated":"2022-06-10T01:07:30.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvhj000q04wc08fb7x9j","content":"<h1 id=\"认识微信小程序的基本设置\"><a href=\"#认识微信小程序的基本设置\" class=\"headerlink\" title=\"认识微信小程序的基本设置\"></a>认识微信小程序的基本设置</h1><h2 id=\"文件类型\"><a href=\"#文件类型\" class=\"headerlink\" title=\"文件类型\"></a>文件类型</h2><div>\n    <img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220609184814148.png\" />    \n</div>\n\n<p>以上为微信小程序的结构目录</p>\n<p>微信小程序的文件类型有: <code>.js</code>、<code>wxml</code>、<code>wxss</code>、<code>json</code></p>\n<p>结合<code>web</code>前端来看可以方便更好理解</p>\n<ul>\n<li><code>wxml</code> —&gt; <code>html</code></li>\n<li><code>wxss</code> —&gt; <code>css</code></li>\n<li><code>js</code> —&gt; <code>js</code> （emmmmmm……😄）</li>\n<li><code>json</code> —&gt; <code>json</code>（就是一个普通的<code>json</code>文件……）</li>\n</ul>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p><code>json</code>文件为页面的配置文件，<code>app.json</code>为全局配置文件，当我们生成页面的时候也会生成<code>json</code>文件，这个生成的<code>json</code>文件是当前页面的配置文件，其中的配置优先级高于全局的<code>app.json</code>配置文件，有冲突的会覆盖<code>app.json</code>中的配置，当然，<code>app.json</code>的配置与页面的<code>json</code>文件也有所不同</p>\n<p><code>app.json</code>的一些基础配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// 页面的路径配置，有点类似vue的route </span></span><br><span class=\"line\">  <span class=\"attr\">&quot;pages&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span> </span><br><span class=\"line\">    <span class=\"string\">&quot;pages/index/index&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pages/logs/logs&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 用于控制窗口的样式</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;window&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;backgroundTextStyle&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;light&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;navigationBarBackgroundColor&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#fff&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;navigationBarTitleText&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Weixin啊&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;navigationBarTextStyle&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;black&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 表示启动新版的组件样式</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;style&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;v2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 站内搜索的配置</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sitemapLocation&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sitemap.json&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>页面的配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 还未学到，待补充</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"页面的创建\"><a href=\"#页面的创建\" class=\"headerlink\" title=\"页面的创建\"></a>页面的创建</h2><ol>\n<li>直接在<code>pages</code>下创建对应的<code>js json wxml wxss</code>文件</li>\n<li>在<code>app.json</code>中的<code>pages</code>下创建路径，然后点击编译自动创建</li>\n<li>在<code>pages</code>上右键选择<code>新建Page</code>，输入名称后自动创建对应的<code>js json wxml wxss</code>文件</li>\n</ol>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-48y7wy.jpg","excerpt":"","more":"<h1 id=\"认识微信小程序的基本设置\"><a href=\"#认识微信小程序的基本设置\" class=\"headerlink\" title=\"认识微信小程序的基本设置\"></a>认识微信小程序的基本设置</h1><h2 id=\"文件类型\"><a href=\"#文件类型\" class=\"headerlink\" title=\"文件类型\"></a>文件类型</h2><div>\n    <img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220609184814148.png\" />    \n</div>\n\n<p>以上为微信小程序的结构目录</p>\n<p>微信小程序的文件类型有: <code>.js</code>、<code>wxml</code>、<code>wxss</code>、<code>json</code></p>\n<p>结合<code>web</code>前端来看可以方便更好理解</p>\n<ul>\n<li><code>wxml</code> —&gt; <code>html</code></li>\n<li><code>wxss</code> —&gt; <code>css</code></li>\n<li><code>js</code> —&gt; <code>js</code> （emmmmmm……😄）</li>\n<li><code>json</code> —&gt; <code>json</code>（就是一个普通的<code>json</code>文件……）</li>\n</ul>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p><code>json</code>文件为页面的配置文件，<code>app.json</code>为全局配置文件，当我们生成页面的时候也会生成<code>json</code>文件，这个生成的<code>json</code>文件是当前页面的配置文件，其中的配置优先级高于全局的<code>app.json</code>配置文件，有冲突的会覆盖<code>app.json</code>中的配置，当然，<code>app.json</code>的配置与页面的<code>json</code>文件也有所不同</p>\n<p><code>app.json</code>的一些基础配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// 页面的路径配置，有点类似vue的route </span></span><br><span class=\"line\">  <span class=\"attr\">&quot;pages&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span> </span><br><span class=\"line\">    <span class=\"string\">&quot;pages/index/index&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pages/logs/logs&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 用于控制窗口的样式</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;window&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;backgroundTextStyle&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;light&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;navigationBarBackgroundColor&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#fff&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;navigationBarTitleText&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Weixin啊&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;navigationBarTextStyle&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;black&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 表示启动新版的组件样式</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;style&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;v2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 站内搜索的配置</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sitemapLocation&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sitemap.json&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>页面的配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 还未学到，待补充</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"页面的创建\"><a href=\"#页面的创建\" class=\"headerlink\" title=\"页面的创建\"></a>页面的创建</h2><ol>\n<li>直接在<code>pages</code>下创建对应的<code>js json wxml wxss</code>文件</li>\n<li>在<code>app.json</code>中的<code>pages</code>下创建路径，然后点击编译自动创建</li>\n<li>在<code>pages</code>上右键选择<code>新建Page</code>，输入名称后自动创建对应的<code>js json wxml wxss</code>文件</li>\n</ol>\n"},{"title":"微信小程序的生命周期","date":"2022-06-12T09:14:32.000Z","_content":"\n# 微信小程序的生命周期\n\n微信小程序的每个页面都存在生命周期\n\n```js\nPage({\n    onLaunch() {}, // 初始化小程序时，全局触发一次\n    onLoad() {}, // 监听页面加载\n    onReady() {}, // 监听页面初次渲染\n    onShow() {}, // 监听页面显示\n    onHide() {}, // 监听页面隐藏\n    onUnload() {}, // 监听页面卸载\n    onPullDownReffres() {}, // 监听用户下拉动作\n    onReachBottom() {}, // 监听滚动条触底\n    onShareAppMessage() {}, // 右上角分享\n})\n```\n\n> 细节\n>\n> 1. `onLoad`和`onShow`\n>\n>    - 初次渲染页面时，二者都会触发，其中`onLoad`会先触发，`onShow`后触发\n>    - `onLoad`只触发一次，`onShow`后续的操作中也可能再次触发\n>    - `onShow`和`onHide`是一对，如：用户将微信在后台隐藏会触发`onHide`，在此打开微信就会触发`onShow`（这只是其中一种情况）\n>\n> 2. `onShareAppMessage`\n>\n>    - `onShateAppMessage`的触发点不是点击右上角的分享按钮，而是在点击分享按钮后，点击**享给朋友**时触发\n>\n>      ![image-20220612173539362](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220612173539362.png)\n>\n>    - 若未设置`onShareAppMessage`，则分线按钮不可点击\n>\n>      ![image-20220612173720496](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220612173720496.png)\n>\n>      \n","source":"_posts/微信小程序/2.微信小程序的生命周期.md","raw":"---\ntitle: 微信小程序的生命周期\ndate: 2022-06-12 17:14:32\ntags: 微信小程序\ncategories:\n - 微信小程序 \n---\n\n# 微信小程序的生命周期\n\n微信小程序的每个页面都存在生命周期\n\n```js\nPage({\n    onLaunch() {}, // 初始化小程序时，全局触发一次\n    onLoad() {}, // 监听页面加载\n    onReady() {}, // 监听页面初次渲染\n    onShow() {}, // 监听页面显示\n    onHide() {}, // 监听页面隐藏\n    onUnload() {}, // 监听页面卸载\n    onPullDownReffres() {}, // 监听用户下拉动作\n    onReachBottom() {}, // 监听滚动条触底\n    onShareAppMessage() {}, // 右上角分享\n})\n```\n\n> 细节\n>\n> 1. `onLoad`和`onShow`\n>\n>    - 初次渲染页面时，二者都会触发，其中`onLoad`会先触发，`onShow`后触发\n>    - `onLoad`只触发一次，`onShow`后续的操作中也可能再次触发\n>    - `onShow`和`onHide`是一对，如：用户将微信在后台隐藏会触发`onHide`，在此打开微信就会触发`onShow`（这只是其中一种情况）\n>\n> 2. `onShareAppMessage`\n>\n>    - `onShateAppMessage`的触发点不是点击右上角的分享按钮，而是在点击分享按钮后，点击**享给朋友**时触发\n>\n>      ![image-20220612173539362](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220612173539362.png)\n>\n>    - 若未设置`onShareAppMessage`，则分线按钮不可点击\n>\n>      ![image-20220612173720496](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220612173720496.png)\n>\n>      \n","slug":"微信小程序/2.微信小程序的生命周期","published":1,"updated":"2022-06-15T00:29:34.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvhl000u04wc1sxr8izc","content":"<h1 id=\"微信小程序的生命周期\"><a href=\"#微信小程序的生命周期\" class=\"headerlink\" title=\"微信小程序的生命周期\"></a>微信小程序的生命周期</h1><p>微信小程序的每个页面都存在生命周期</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Page</span>(&#123;</span><br><span class=\"line\">    <span class=\"title function_\">onLaunch</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 初始化小程序时，全局触发一次</span></span><br><span class=\"line\">    <span class=\"title function_\">onLoad</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 监听页面加载</span></span><br><span class=\"line\">    <span class=\"title function_\">onReady</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 监听页面初次渲染</span></span><br><span class=\"line\">    <span class=\"title function_\">onShow</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 监听页面显示</span></span><br><span class=\"line\">    <span class=\"title function_\">onHide</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 监听页面隐藏</span></span><br><span class=\"line\">    <span class=\"title function_\">onUnload</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 监听页面卸载</span></span><br><span class=\"line\">    <span class=\"title function_\">onPullDownReffres</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 监听用户下拉动作</span></span><br><span class=\"line\">    <span class=\"title function_\">onReachBottom</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 监听滚动条触底</span></span><br><span class=\"line\">    <span class=\"title function_\">onShareAppMessage</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 右上角分享</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>细节</p>\n<ol>\n<li><p><code>onLoad</code>和<code>onShow</code></p>\n<ul>\n<li>初次渲染页面时，二者都会触发，其中<code>onLoad</code>会先触发，<code>onShow</code>后触发</li>\n<li><code>onLoad</code>只触发一次，<code>onShow</code>后续的操作中也可能再次触发</li>\n<li><code>onShow</code>和<code>onHide</code>是一对，如：用户将微信在后台隐藏会触发<code>onHide</code>，在此打开微信就会触发<code>onShow</code>（这只是其中一种情况）</li>\n</ul>\n</li>\n<li><p><code>onShareAppMessage</code></p>\n<ul>\n<li><p><code>onShateAppMessage</code>的触发点不是点击右上角的分享按钮，而是在点击分享按钮后，点击<strong>享给朋友</strong>时触发</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220612173539362.png\" alt=\"image-20220612173539362\"></p>\n</li>\n<li><p>若未设置<code>onShareAppMessage</code>，则分线按钮不可点击</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220612173720496.png\" alt=\"image-20220612173720496\"></p>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-2e7v1g.png","excerpt":"","more":"<h1 id=\"微信小程序的生命周期\"><a href=\"#微信小程序的生命周期\" class=\"headerlink\" title=\"微信小程序的生命周期\"></a>微信小程序的生命周期</h1><p>微信小程序的每个页面都存在生命周期</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Page</span>(&#123;</span><br><span class=\"line\">    <span class=\"title function_\">onLaunch</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 初始化小程序时，全局触发一次</span></span><br><span class=\"line\">    <span class=\"title function_\">onLoad</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 监听页面加载</span></span><br><span class=\"line\">    <span class=\"title function_\">onReady</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 监听页面初次渲染</span></span><br><span class=\"line\">    <span class=\"title function_\">onShow</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 监听页面显示</span></span><br><span class=\"line\">    <span class=\"title function_\">onHide</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 监听页面隐藏</span></span><br><span class=\"line\">    <span class=\"title function_\">onUnload</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 监听页面卸载</span></span><br><span class=\"line\">    <span class=\"title function_\">onPullDownReffres</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 监听用户下拉动作</span></span><br><span class=\"line\">    <span class=\"title function_\">onReachBottom</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 监听滚动条触底</span></span><br><span class=\"line\">    <span class=\"title function_\">onShareAppMessage</span>(<span class=\"params\"></span>) &#123;&#125;, <span class=\"comment\">// 右上角分享</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>细节</p>\n<ol>\n<li><p><code>onLoad</code>和<code>onShow</code></p>\n<ul>\n<li>初次渲染页面时，二者都会触发，其中<code>onLoad</code>会先触发，<code>onShow</code>后触发</li>\n<li><code>onLoad</code>只触发一次，<code>onShow</code>后续的操作中也可能再次触发</li>\n<li><code>onShow</code>和<code>onHide</code>是一对，如：用户将微信在后台隐藏会触发<code>onHide</code>，在此打开微信就会触发<code>onShow</code>（这只是其中一种情况）</li>\n</ul>\n</li>\n<li><p><code>onShareAppMessage</code></p>\n<ul>\n<li><p><code>onShateAppMessage</code>的触发点不是点击右上角的分享按钮，而是在点击分享按钮后，点击<strong>享给朋友</strong>时触发</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220612173539362.png\" alt=\"image-20220612173539362\"></p>\n</li>\n<li><p>若未设置<code>onShareAppMessage</code>，则分线按钮不可点击</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220612173720496.png\" alt=\"image-20220612173720496\"></p>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n"},{"title":"blob文件下载","date":"2022-06-15T00:31:21.000Z","_content":"\n# blob文件下载\n\n整体思路为，获取到后端返回的`blob`文件流后，通过`a`标签的`href`属性，载入数据流，还可以自定义文件名称。\n\n```js\nconst utils = {\n\tdownloadFile(id) {\n\t\treturn http.post('/download-file', {}, {\n            responseType: 'blob',\n        })\n    }\n};\n\nasync downloadFile() {\n\tawait utils.downloadFile(this.$route.query.id).then(res => {\n       const blob = new Blob([res.data]);\n       const a = document.createElement(\"a\");\n       a.download = \"fileName.xlsx\"; // 自定义文件名称\n       a.style.disply = \"none\";\n       a.href = URL.createObjectURL(blob);\n       document.body.appendChild(a);\n       a.click();\n       URL.revokeObjectURL(a.href);\n       document.body.removeChild(a);\n   });    \n};\n```\n\n> 注意\n>\n> 1. `responseType`必须为`blob`或者`arraybuffer`，否则下载的文件会损坏，数据无法正确展示\n","source":"_posts/功能/blob文件下载.md","raw":"---\ntitle: blob文件下载\ndate: 2022-06-15 08:31:21\ntags: 功能\ncategories: 功能\n---\n\n# blob文件下载\n\n整体思路为，获取到后端返回的`blob`文件流后，通过`a`标签的`href`属性，载入数据流，还可以自定义文件名称。\n\n```js\nconst utils = {\n\tdownloadFile(id) {\n\t\treturn http.post('/download-file', {}, {\n            responseType: 'blob',\n        })\n    }\n};\n\nasync downloadFile() {\n\tawait utils.downloadFile(this.$route.query.id).then(res => {\n       const blob = new Blob([res.data]);\n       const a = document.createElement(\"a\");\n       a.download = \"fileName.xlsx\"; // 自定义文件名称\n       a.style.disply = \"none\";\n       a.href = URL.createObjectURL(blob);\n       document.body.appendChild(a);\n       a.click();\n       URL.revokeObjectURL(a.href);\n       document.body.removeChild(a);\n   });    \n};\n```\n\n> 注意\n>\n> 1. `responseType`必须为`blob`或者`arraybuffer`，否则下载的文件会损坏，数据无法正确展示\n","slug":"功能/blob文件下载","published":1,"updated":"2022-06-15T00:58:08.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvhm000x04wcao7z7bj6","content":"<h1 id=\"blob文件下载\"><a href=\"#blob文件下载\" class=\"headerlink\" title=\"blob文件下载\"></a>blob文件下载</h1><p>整体思路为，获取到后端返回的<code>blob</code>文件流后，通过<code>a</code>标签的<code>href</code>属性，载入数据流，还可以自定义文件名称。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> utils = &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">downloadFile</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> http.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/download-file&#x27;</span>, &#123;&#125;, &#123;</span><br><span class=\"line\">            <span class=\"attr\">responseType</span>: <span class=\"string\">&#x27;blob&#x27;</span>,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">downloadFile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> utils.<span class=\"title function_\">downloadFile</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">query</span>.<span class=\"property\">id</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([res.<span class=\"property\">data</span>]);</span><br><span class=\"line\">       <span class=\"keyword\">const</span> a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">       a.<span class=\"property\">download</span> = <span class=\"string\">&quot;fileName.xlsx&quot;</span>; <span class=\"comment\">// 自定义文件名称</span></span><br><span class=\"line\">       a.<span class=\"property\">style</span>.<span class=\"property\">disply</span> = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">       a.<span class=\"property\">href</span> = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob);</span><br><span class=\"line\">       <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(a);</span><br><span class=\"line\">       a.<span class=\"title function_\">click</span>();</span><br><span class=\"line\">       <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">revokeObjectURL</span>(a.<span class=\"property\">href</span>);</span><br><span class=\"line\">       <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(a);</span><br><span class=\"line\">   &#125;);    </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意</p>\n<ol>\n<li><code>responseType</code>必须为<code>blob</code>或者<code>arraybuffer</code>，否则下载的文件会损坏，数据无法正确展示</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-0j1xm0.jpg","excerpt":"","more":"<h1 id=\"blob文件下载\"><a href=\"#blob文件下载\" class=\"headerlink\" title=\"blob文件下载\"></a>blob文件下载</h1><p>整体思路为，获取到后端返回的<code>blob</code>文件流后，通过<code>a</code>标签的<code>href</code>属性，载入数据流，还可以自定义文件名称。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> utils = &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">downloadFile</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> http.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/download-file&#x27;</span>, &#123;&#125;, &#123;</span><br><span class=\"line\">            <span class=\"attr\">responseType</span>: <span class=\"string\">&#x27;blob&#x27;</span>,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">downloadFile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> utils.<span class=\"title function_\">downloadFile</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">query</span>.<span class=\"property\">id</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([res.<span class=\"property\">data</span>]);</span><br><span class=\"line\">       <span class=\"keyword\">const</span> a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">       a.<span class=\"property\">download</span> = <span class=\"string\">&quot;fileName.xlsx&quot;</span>; <span class=\"comment\">// 自定义文件名称</span></span><br><span class=\"line\">       a.<span class=\"property\">style</span>.<span class=\"property\">disply</span> = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">       a.<span class=\"property\">href</span> = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob);</span><br><span class=\"line\">       <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(a);</span><br><span class=\"line\">       a.<span class=\"title function_\">click</span>();</span><br><span class=\"line\">       <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">revokeObjectURL</span>(a.<span class=\"property\">href</span>);</span><br><span class=\"line\">       <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(a);</span><br><span class=\"line\">   &#125;);    </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意</p>\n<ol>\n<li><code>responseType</code>必须为<code>blob</code>或者<code>arraybuffer</code>，否则下载的文件会损坏，数据无法正确展示</li>\n</ol>\n</blockquote>\n"},{"title":"清除text-indent对img的影响","date":"2022-06-14T00:47:32.000Z","_content":"\n# 清除text-indent对img的影响\n\n今天在处理富文本样式的时候遇到一个问题，当给`p`标签设置了`text-indent`后，`p`标签下的`img`标签也会收到此属性的影响而前面出现空隙。如下图所示：\n\n![image-20220614090313479](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220614090313479.png)\n\n经过一番查找后发现，只需给`img`标签设`display: block`（除了带有`inline`的属性就可以，也就是说只要使得元素不再是行内元素即可）或`float`也可以。\n\n除此之外，在前辈老哥的提醒下，在处理富文本样式的时候不可直接使用标签作为选择器，这样会导致样式的污染，应当使用`class`类来进行样式的约束。😁\n","source":"_posts/problem/css/清除text-indent对img的影响.md","raw":"---\ntitle: 清除text-indent对img的影响\ndate: 2022-06-14 08:47:32\ntags:\n - css\n - problem\ncategories:\n - problem\n - css\n---\n\n# 清除text-indent对img的影响\n\n今天在处理富文本样式的时候遇到一个问题，当给`p`标签设置了`text-indent`后，`p`标签下的`img`标签也会收到此属性的影响而前面出现空隙。如下图所示：\n\n![image-20220614090313479](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220614090313479.png)\n\n经过一番查找后发现，只需给`img`标签设`display: block`（除了带有`inline`的属性就可以，也就是说只要使得元素不再是行内元素即可）或`float`也可以。\n\n除此之外，在前辈老哥的提醒下，在处理富文本样式的时候不可直接使用标签作为选择器，这样会导致样式的污染，应当使用`class`类来进行样式的约束。😁\n","slug":"problem/css/清除text-indent对img的影响","published":1,"updated":"2022-06-14T01:08:58.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvhn001104wc0fp10iwi","content":"<h1 id=\"清除text-indent对img的影响\"><a href=\"#清除text-indent对img的影响\" class=\"headerlink\" title=\"清除text-indent对img的影响\"></a>清除text-indent对img的影响</h1><p>今天在处理富文本样式的时候遇到一个问题，当给<code>p</code>标签设置了<code>text-indent</code>后，<code>p</code>标签下的<code>img</code>标签也会收到此属性的影响而前面出现空隙。如下图所示：</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220614090313479.png\" alt=\"image-20220614090313479\"></p>\n<p>经过一番查找后发现，只需给<code>img</code>标签设<code>display: block</code>（除了带有<code>inline</code>的属性就可以，也就是说只要使得元素不再是行内元素即可）或<code>float</code>也可以。</p>\n<p>除此之外，在前辈老哥的提醒下，在处理富文本样式的时候不可直接使用标签作为选择器，这样会导致样式的污染，应当使用<code>class</code>类来进行样式的约束。😁</p>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-2ew3pm.jpg","excerpt":"","more":"<h1 id=\"清除text-indent对img的影响\"><a href=\"#清除text-indent对img的影响\" class=\"headerlink\" title=\"清除text-indent对img的影响\"></a>清除text-indent对img的影响</h1><p>今天在处理富文本样式的时候遇到一个问题，当给<code>p</code>标签设置了<code>text-indent</code>后，<code>p</code>标签下的<code>img</code>标签也会收到此属性的影响而前面出现空隙。如下图所示：</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220614090313479.png\" alt=\"image-20220614090313479\"></p>\n<p>经过一番查找后发现，只需给<code>img</code>标签设<code>display: block</code>（除了带有<code>inline</code>的属性就可以，也就是说只要使得元素不再是行内元素即可）或<code>float</code>也可以。</p>\n<p>除此之外，在前辈老哥的提醒下，在处理富文本样式的时候不可直接使用标签作为选择器，这样会导致样式的污染，应当使用<code>class</code>类来进行样式的约束。😁</p>\n"},{"title":"pdf导出","date":"2022-06-15T00:31:21.000Z","_content":"\n# pdf导出\n\n```js\nimport html2canvas from \"html2canvas\";\nimport JsPDF from \"jspdf\";\n\nexport function downloadPdf(ele, pdfName, cb) {\n  let eleW = ele.offsetWidth;\n  let eleH = ele.offsetHeight;\n  let eleOffsetTop = ele.offsetTop;\n  let eleOffsetLeft = ele.offsetLeft;\n\n  const canvas = document.createElement(\"canvas\");\n  var abs = 0;\n\n  let win_in =\n    document.documentElement.clientWidth || document.body.clientWidth; // 获得当前可视窗口的宽度（不包含滚动条）\n  let win_out = window.innerWidth; // 获得当前窗口的宽度（包含滚动条）\n\n  if (win_out > win_in) {\n    // abs = (win_o - win_i)/2;    // 获得滚动条长度的一半\n    abs = (win_out - win_in) / 2; // 获得滚动条宽度的一半\n    // console.log(a, '新abs');\n  }\n  canvas.width = eleW * 2; // 将画布宽&&高放大两倍\n  canvas.height = eleH * 2;\n\n  var context = canvas.getContext(\"2d\");\n  context.scale(2, 2);\n  context.translate(-eleOffsetLeft - abs, -eleOffsetTop);\n  // 这里默认横向没有滚动条的情况，因为offset.left(),有无滚动条的时候存在差值，因此\n  // translate的时候，要把这个差值去掉\n\n  // html2canvas(element).then( (canvas)=>{ //报错\n  // html2canvas(element[0]).then( (canvas)=>{\n  html2canvas(ele, {\n    dpi: 300,\n    // allowTaint: true,  //允许 canvas 污染， allowTaint参数要去掉，否则是无法通过toDataURL导出canvas数据的\n    useCORS: true, //允许canvas画布内 可以跨域请求外部链接图片, 允许跨域请求。\n  }).then((canvas) => {\n    var contentWidth = canvas.width;\n    var contentHeight = canvas.height;\n    //一页pdf显示html页面生成的canvas高度;\n    var pageHeight = (contentWidth / 592.28) * 841.89;\n    //未生成pdf的html页面高度\n    var leftHeight = contentHeight;\n    //页面偏移\n    var position = 0;\n    //a4纸的尺寸[595.28,841.89]，html页面生成的canvas在pdf中图片的宽高\n    var imgWidth = 595.28;\n    var imgHeight = (595.28 / contentWidth) * contentHeight;\n    var pageData = canvas.toDataURL(\"image/jpeg\", 1.0);\n    var pdf = new JsPDF(\"\", \"pt\", \"a4\");\n    //有两个高度需要区分，一个是html页面的实际高度，和生成pdf的页面高度(841.89)\n    //当内容未超过pdf一页显示的范围，无需分页\n    if (leftHeight < pageHeight) {\n      //在pdf.addImage(pageData, 'JPEG', 左，上，宽度，高度)设置在pdf中显示；\n      pdf.addImage(pageData, \"JPEG\", 0, 0, imgWidth, imgHeight);\n      // pdf.addImage(pageData, 'JPEG', 20, 40, imgWidth, imgHeight);\n    } else {\n      // 分页\n      while (leftHeight > 0) {\n        pdf.addImage(pageData, \"JPEG\", 0, position, imgWidth, imgHeight);\n        leftHeight -= pageHeight;\n        position -= 841.89;\n        //避免添加空白页\n        if (leftHeight > 0) {\n          pdf.addPage();\n        }\n      }\n    }\n    //可动态生成\n    pdf.save(pdfName);\n  }).then(() => {\n    if(cb) {\n      cb();\n    }\n  });\n}\n\n```\n\n","source":"_posts/功能/pdf导出.md","raw":"---\ntitle: pdf导出\ndate: 2022-06-15 08:31:21\ntags: 功能\ncategories: 功能\n---\n\n# pdf导出\n\n```js\nimport html2canvas from \"html2canvas\";\nimport JsPDF from \"jspdf\";\n\nexport function downloadPdf(ele, pdfName, cb) {\n  let eleW = ele.offsetWidth;\n  let eleH = ele.offsetHeight;\n  let eleOffsetTop = ele.offsetTop;\n  let eleOffsetLeft = ele.offsetLeft;\n\n  const canvas = document.createElement(\"canvas\");\n  var abs = 0;\n\n  let win_in =\n    document.documentElement.clientWidth || document.body.clientWidth; // 获得当前可视窗口的宽度（不包含滚动条）\n  let win_out = window.innerWidth; // 获得当前窗口的宽度（包含滚动条）\n\n  if (win_out > win_in) {\n    // abs = (win_o - win_i)/2;    // 获得滚动条长度的一半\n    abs = (win_out - win_in) / 2; // 获得滚动条宽度的一半\n    // console.log(a, '新abs');\n  }\n  canvas.width = eleW * 2; // 将画布宽&&高放大两倍\n  canvas.height = eleH * 2;\n\n  var context = canvas.getContext(\"2d\");\n  context.scale(2, 2);\n  context.translate(-eleOffsetLeft - abs, -eleOffsetTop);\n  // 这里默认横向没有滚动条的情况，因为offset.left(),有无滚动条的时候存在差值，因此\n  // translate的时候，要把这个差值去掉\n\n  // html2canvas(element).then( (canvas)=>{ //报错\n  // html2canvas(element[0]).then( (canvas)=>{\n  html2canvas(ele, {\n    dpi: 300,\n    // allowTaint: true,  //允许 canvas 污染， allowTaint参数要去掉，否则是无法通过toDataURL导出canvas数据的\n    useCORS: true, //允许canvas画布内 可以跨域请求外部链接图片, 允许跨域请求。\n  }).then((canvas) => {\n    var contentWidth = canvas.width;\n    var contentHeight = canvas.height;\n    //一页pdf显示html页面生成的canvas高度;\n    var pageHeight = (contentWidth / 592.28) * 841.89;\n    //未生成pdf的html页面高度\n    var leftHeight = contentHeight;\n    //页面偏移\n    var position = 0;\n    //a4纸的尺寸[595.28,841.89]，html页面生成的canvas在pdf中图片的宽高\n    var imgWidth = 595.28;\n    var imgHeight = (595.28 / contentWidth) * contentHeight;\n    var pageData = canvas.toDataURL(\"image/jpeg\", 1.0);\n    var pdf = new JsPDF(\"\", \"pt\", \"a4\");\n    //有两个高度需要区分，一个是html页面的实际高度，和生成pdf的页面高度(841.89)\n    //当内容未超过pdf一页显示的范围，无需分页\n    if (leftHeight < pageHeight) {\n      //在pdf.addImage(pageData, 'JPEG', 左，上，宽度，高度)设置在pdf中显示；\n      pdf.addImage(pageData, \"JPEG\", 0, 0, imgWidth, imgHeight);\n      // pdf.addImage(pageData, 'JPEG', 20, 40, imgWidth, imgHeight);\n    } else {\n      // 分页\n      while (leftHeight > 0) {\n        pdf.addImage(pageData, \"JPEG\", 0, position, imgWidth, imgHeight);\n        leftHeight -= pageHeight;\n        position -= 841.89;\n        //避免添加空白页\n        if (leftHeight > 0) {\n          pdf.addPage();\n        }\n      }\n    }\n    //可动态生成\n    pdf.save(pdfName);\n  }).then(() => {\n    if(cb) {\n      cb();\n    }\n  });\n}\n\n```\n\n","slug":"功能/pdf导出","published":1,"updated":"2022-06-15T00:39:05.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvhp001304wc1tjq0br0","content":"<h1 id=\"pdf导出\"><a href=\"#pdf导出\" class=\"headerlink\" title=\"pdf导出\"></a>pdf导出</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> html2canvas <span class=\"keyword\">from</span> <span class=\"string\">&quot;html2canvas&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">JsPDF</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;jspdf&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">downloadPdf</span>(<span class=\"params\">ele, pdfName, cb</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> eleW = ele.<span class=\"property\">offsetWidth</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> eleH = ele.<span class=\"property\">offsetHeight</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> eleOffsetTop = ele.<span class=\"property\">offsetTop</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> eleOffsetLeft = ele.<span class=\"property\">offsetLeft</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> abs = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> win_in =</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientWidth</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span>; <span class=\"comment\">// 获得当前可视窗口的宽度（不包含滚动条）</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> win_out = <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>; <span class=\"comment\">// 获得当前窗口的宽度（包含滚动条）</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (win_out &gt; win_in) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// abs = (win_o - win_i)/2;    // 获得滚动条长度的一半</span></span><br><span class=\"line\">    abs = (win_out - win_in) / <span class=\"number\">2</span>; <span class=\"comment\">// 获得滚动条宽度的一半</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(a, &#x27;新abs&#x27;);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  canvas.<span class=\"property\">width</span> = eleW * <span class=\"number\">2</span>; <span class=\"comment\">// 将画布宽&amp;&amp;高放大两倍</span></span><br><span class=\"line\">  canvas.<span class=\"property\">height</span> = eleH * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> context = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\">  context.<span class=\"title function_\">scale</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  context.<span class=\"title function_\">translate</span>(-eleOffsetLeft - abs, -eleOffsetTop);</span><br><span class=\"line\">  <span class=\"comment\">// 这里默认横向没有滚动条的情况，因为offset.left(),有无滚动条的时候存在差值，因此</span></span><br><span class=\"line\">  <span class=\"comment\">// translate的时候，要把这个差值去掉</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// html2canvas(element).then( (canvas)=&gt;&#123; //报错</span></span><br><span class=\"line\">  <span class=\"comment\">// html2canvas(element[0]).then( (canvas)=&gt;&#123;</span></span><br><span class=\"line\">  <span class=\"title function_\">html2canvas</span>(ele, &#123;</span><br><span class=\"line\">    <span class=\"attr\">dpi</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"comment\">// allowTaint: true,  //允许 canvas 污染， allowTaint参数要去掉，否则是无法通过toDataURL导出canvas数据的</span></span><br><span class=\"line\">    <span class=\"attr\">useCORS</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//允许canvas画布内 可以跨域请求外部链接图片, 允许跨域请求。</span></span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">canvas</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> contentWidth = canvas.<span class=\"property\">width</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> contentHeight = canvas.<span class=\"property\">height</span>;</span><br><span class=\"line\">    <span class=\"comment\">//一页pdf显示html页面生成的canvas高度;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pageHeight = (contentWidth / <span class=\"number\">592.28</span>) * <span class=\"number\">841.89</span>;</span><br><span class=\"line\">    <span class=\"comment\">//未生成pdf的html页面高度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> leftHeight = contentHeight;</span><br><span class=\"line\">    <span class=\"comment\">//页面偏移</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> position = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//a4纸的尺寸[595.28,841.89]，html页面生成的canvas在pdf中图片的宽高</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> imgWidth = <span class=\"number\">595.28</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> imgHeight = (<span class=\"number\">595.28</span> / contentWidth) * contentHeight;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pageData = canvas.<span class=\"title function_\">toDataURL</span>(<span class=\"string\">&quot;image/jpeg&quot;</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pdf = <span class=\"keyword\">new</span> <span class=\"title class_\">JsPDF</span>(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;pt&quot;</span>, <span class=\"string\">&quot;a4&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//有两个高度需要区分，一个是html页面的实际高度，和生成pdf的页面高度(841.89)</span></span><br><span class=\"line\">    <span class=\"comment\">//当内容未超过pdf一页显示的范围，无需分页</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftHeight &lt; pageHeight) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//在pdf.addImage(pageData, &#x27;JPEG&#x27;, 左，上，宽度，高度)设置在pdf中显示；</span></span><br><span class=\"line\">      pdf.<span class=\"title function_\">addImage</span>(pageData, <span class=\"string\">&quot;JPEG&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, imgWidth, imgHeight);</span><br><span class=\"line\">      <span class=\"comment\">// pdf.addImage(pageData, &#x27;JPEG&#x27;, 20, 40, imgWidth, imgHeight);</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 分页</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (leftHeight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        pdf.<span class=\"title function_\">addImage</span>(pageData, <span class=\"string\">&quot;JPEG&quot;</span>, <span class=\"number\">0</span>, position, imgWidth, imgHeight);</span><br><span class=\"line\">        leftHeight -= pageHeight;</span><br><span class=\"line\">        position -= <span class=\"number\">841.89</span>;</span><br><span class=\"line\">        <span class=\"comment\">//避免添加空白页</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leftHeight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          pdf.<span class=\"title function_\">addPage</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//可动态生成</span></span><br><span class=\"line\">    pdf.<span class=\"title function_\">save</span>(pdfName);</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cb) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">cb</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-4l5j3r.jpg","excerpt":"","more":"<h1 id=\"pdf导出\"><a href=\"#pdf导出\" class=\"headerlink\" title=\"pdf导出\"></a>pdf导出</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> html2canvas <span class=\"keyword\">from</span> <span class=\"string\">&quot;html2canvas&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">JsPDF</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;jspdf&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">downloadPdf</span>(<span class=\"params\">ele, pdfName, cb</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> eleW = ele.<span class=\"property\">offsetWidth</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> eleH = ele.<span class=\"property\">offsetHeight</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> eleOffsetTop = ele.<span class=\"property\">offsetTop</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> eleOffsetLeft = ele.<span class=\"property\">offsetLeft</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> abs = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> win_in =</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientWidth</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span>; <span class=\"comment\">// 获得当前可视窗口的宽度（不包含滚动条）</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> win_out = <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>; <span class=\"comment\">// 获得当前窗口的宽度（包含滚动条）</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (win_out &gt; win_in) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// abs = (win_o - win_i)/2;    // 获得滚动条长度的一半</span></span><br><span class=\"line\">    abs = (win_out - win_in) / <span class=\"number\">2</span>; <span class=\"comment\">// 获得滚动条宽度的一半</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(a, &#x27;新abs&#x27;);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  canvas.<span class=\"property\">width</span> = eleW * <span class=\"number\">2</span>; <span class=\"comment\">// 将画布宽&amp;&amp;高放大两倍</span></span><br><span class=\"line\">  canvas.<span class=\"property\">height</span> = eleH * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> context = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\">  context.<span class=\"title function_\">scale</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  context.<span class=\"title function_\">translate</span>(-eleOffsetLeft - abs, -eleOffsetTop);</span><br><span class=\"line\">  <span class=\"comment\">// 这里默认横向没有滚动条的情况，因为offset.left(),有无滚动条的时候存在差值，因此</span></span><br><span class=\"line\">  <span class=\"comment\">// translate的时候，要把这个差值去掉</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// html2canvas(element).then( (canvas)=&gt;&#123; //报错</span></span><br><span class=\"line\">  <span class=\"comment\">// html2canvas(element[0]).then( (canvas)=&gt;&#123;</span></span><br><span class=\"line\">  <span class=\"title function_\">html2canvas</span>(ele, &#123;</span><br><span class=\"line\">    <span class=\"attr\">dpi</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"comment\">// allowTaint: true,  //允许 canvas 污染， allowTaint参数要去掉，否则是无法通过toDataURL导出canvas数据的</span></span><br><span class=\"line\">    <span class=\"attr\">useCORS</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//允许canvas画布内 可以跨域请求外部链接图片, 允许跨域请求。</span></span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">canvas</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> contentWidth = canvas.<span class=\"property\">width</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> contentHeight = canvas.<span class=\"property\">height</span>;</span><br><span class=\"line\">    <span class=\"comment\">//一页pdf显示html页面生成的canvas高度;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pageHeight = (contentWidth / <span class=\"number\">592.28</span>) * <span class=\"number\">841.89</span>;</span><br><span class=\"line\">    <span class=\"comment\">//未生成pdf的html页面高度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> leftHeight = contentHeight;</span><br><span class=\"line\">    <span class=\"comment\">//页面偏移</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> position = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//a4纸的尺寸[595.28,841.89]，html页面生成的canvas在pdf中图片的宽高</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> imgWidth = <span class=\"number\">595.28</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> imgHeight = (<span class=\"number\">595.28</span> / contentWidth) * contentHeight;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pageData = canvas.<span class=\"title function_\">toDataURL</span>(<span class=\"string\">&quot;image/jpeg&quot;</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pdf = <span class=\"keyword\">new</span> <span class=\"title class_\">JsPDF</span>(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;pt&quot;</span>, <span class=\"string\">&quot;a4&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//有两个高度需要区分，一个是html页面的实际高度，和生成pdf的页面高度(841.89)</span></span><br><span class=\"line\">    <span class=\"comment\">//当内容未超过pdf一页显示的范围，无需分页</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftHeight &lt; pageHeight) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//在pdf.addImage(pageData, &#x27;JPEG&#x27;, 左，上，宽度，高度)设置在pdf中显示；</span></span><br><span class=\"line\">      pdf.<span class=\"title function_\">addImage</span>(pageData, <span class=\"string\">&quot;JPEG&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, imgWidth, imgHeight);</span><br><span class=\"line\">      <span class=\"comment\">// pdf.addImage(pageData, &#x27;JPEG&#x27;, 20, 40, imgWidth, imgHeight);</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 分页</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (leftHeight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        pdf.<span class=\"title function_\">addImage</span>(pageData, <span class=\"string\">&quot;JPEG&quot;</span>, <span class=\"number\">0</span>, position, imgWidth, imgHeight);</span><br><span class=\"line\">        leftHeight -= pageHeight;</span><br><span class=\"line\">        position -= <span class=\"number\">841.89</span>;</span><br><span class=\"line\">        <span class=\"comment\">//避免添加空白页</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leftHeight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          pdf.<span class=\"title function_\">addPage</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//可动态生成</span></span><br><span class=\"line\">    pdf.<span class=\"title function_\">save</span>(pdfName);</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cb) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">cb</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"使用地图坐标轴遇到的问题","date":"2022-06-01T10:44:38.000Z","_content":"\n\n# 使用地图坐标轴遇到的问题\n\n近日，需要使用`echarts`做一个地图并渲染数据的场景，效果图如下，但是由于对`echarts`的使用并不是很熟练，所以特此记录一下过程中遇到的问题，以便日后参考~\n\n![image-20220601184948474](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220601184948474.png)\n\n首先是地图资源的获取[阿里DataV](http://datav.aliyun.com/portal/school/atlas/area_selector#&lat=29.67402915372495&lng=121.56761992209837&zoom=8.5)，选择你想要的地图区域后下载即可，这里我下载的是`json`文件\n\n![image-20220601190336405](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220601190336405.png)\n\n## 问题1：地图的注册\n\n`echarts`给出的接口是`echarts.registerMap('name', mapsSource)`进行注册\n\n我们需要使用接口请求本地或服务器来引入地图资源，这里我使用`axios`来请求本地资源进行导入，但是接口返回一直是404，经过一番搜索后发现，问题出现在地图资源的存放上，我将地图资源放到了`src/assets/maps/`下（具体为啥在了解后补充），应该放在`public`目录下，再后来又发现一种导入方式，就是直接`import`将地图资源导入，然后直接当参数传入即可使用\n\n```\nimport mapSource from '@/assets/maps/chongqing.json';\n\nthis.$echarts.registerMap(\"chongqing\", mapSource);\n```\n\n## 问题2：坐标的转换\n\n地图中类似雷达扫描的元素是一个加了动画的`div`，但是这个元素的位置需要根据接口返回的经纬度数据来决定（好尴尬😅，不知道咋弄……），经过一番百度，发现`echarts`提供了这个接口（更尴尬了……）。\n\n![image-20220601192920051](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220601192920051.png)\n\n这个接口返回的是一个数组`[经度, 纬度]`\n\n## 问题3：整个地图区域设置渐变色\n\n最终效果如下图\n\n![image-20220615090706568](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220615090706568.png)\n\n`echarts`虽然提供了设置区域为渐变色的配置项（`itemStyle.areaColor`），但是设置的是单个区域的渐变，这会使得整个地图的每个区域都是分开的渐变，如下图\n\n![image-20220615091047043](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220615091047043.png)\n\n经过一番查阅，得到了解决问题的灵感，既然`itemStyle.areaColor`设置的是单个区域的颜色，那么地图不要子区域不就行了，但是业务要求还需要子区域的选择，所以我们只要将`geo`的每个子区域的颜色设置为透明，这样就只有地图的边界线了，然后再设置`series.type[map]`为一个没有子区域的完成地图，再给其设置相应的渐变，这样就达成了我们的目的。perfect……😘\n","source":"_posts/problem/echarts/使用地图坐标轴遇到的问题.md","raw":"---\ntitle: 使用地图坐标轴遇到的问题\ndate: 2022-06-01 18:44:38\ntags:\n - echarts\n - problem\ncategories:\n - problem\n - echarts\n---\n\n\n# 使用地图坐标轴遇到的问题\n\n近日，需要使用`echarts`做一个地图并渲染数据的场景，效果图如下，但是由于对`echarts`的使用并不是很熟练，所以特此记录一下过程中遇到的问题，以便日后参考~\n\n![image-20220601184948474](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220601184948474.png)\n\n首先是地图资源的获取[阿里DataV](http://datav.aliyun.com/portal/school/atlas/area_selector#&lat=29.67402915372495&lng=121.56761992209837&zoom=8.5)，选择你想要的地图区域后下载即可，这里我下载的是`json`文件\n\n![image-20220601190336405](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220601190336405.png)\n\n## 问题1：地图的注册\n\n`echarts`给出的接口是`echarts.registerMap('name', mapsSource)`进行注册\n\n我们需要使用接口请求本地或服务器来引入地图资源，这里我使用`axios`来请求本地资源进行导入，但是接口返回一直是404，经过一番搜索后发现，问题出现在地图资源的存放上，我将地图资源放到了`src/assets/maps/`下（具体为啥在了解后补充），应该放在`public`目录下，再后来又发现一种导入方式，就是直接`import`将地图资源导入，然后直接当参数传入即可使用\n\n```\nimport mapSource from '@/assets/maps/chongqing.json';\n\nthis.$echarts.registerMap(\"chongqing\", mapSource);\n```\n\n## 问题2：坐标的转换\n\n地图中类似雷达扫描的元素是一个加了动画的`div`，但是这个元素的位置需要根据接口返回的经纬度数据来决定（好尴尬😅，不知道咋弄……），经过一番百度，发现`echarts`提供了这个接口（更尴尬了……）。\n\n![image-20220601192920051](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220601192920051.png)\n\n这个接口返回的是一个数组`[经度, 纬度]`\n\n## 问题3：整个地图区域设置渐变色\n\n最终效果如下图\n\n![image-20220615090706568](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220615090706568.png)\n\n`echarts`虽然提供了设置区域为渐变色的配置项（`itemStyle.areaColor`），但是设置的是单个区域的渐变，这会使得整个地图的每个区域都是分开的渐变，如下图\n\n![image-20220615091047043](https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220615091047043.png)\n\n经过一番查阅，得到了解决问题的灵感，既然`itemStyle.areaColor`设置的是单个区域的颜色，那么地图不要子区域不就行了，但是业务要求还需要子区域的选择，所以我们只要将`geo`的每个子区域的颜色设置为透明，这样就只有地图的边界线了，然后再设置`series.type[map]`为一个没有子区域的完成地图，再给其设置相应的渐变，这样就达成了我们的目的。perfect……😘\n","slug":"problem/echarts/使用地图坐标轴遇到的问题","published":1,"updated":"2022-06-15T01:18:07.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvi8002g04wcgq979dvy","content":"<h1 id=\"使用地图坐标轴遇到的问题\"><a href=\"#使用地图坐标轴遇到的问题\" class=\"headerlink\" title=\"使用地图坐标轴遇到的问题\"></a>使用地图坐标轴遇到的问题</h1><p>近日，需要使用<code>echarts</code>做一个地图并渲染数据的场景，效果图如下，但是由于对<code>echarts</code>的使用并不是很熟练，所以特此记录一下过程中遇到的问题，以便日后参考~</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220601184948474.png\" alt=\"image-20220601184948474\"></p>\n<p>首先是地图资源的获取<a href=\"http://datav.aliyun.com/portal/school/atlas/area_selector#&lat=29.67402915372495&lng=121.56761992209837&zoom=8.5\">阿里DataV</a>，选择你想要的地图区域后下载即可，这里我下载的是<code>json</code>文件</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220601190336405.png\" alt=\"image-20220601190336405\"></p>\n<h2 id=\"问题1：地图的注册\"><a href=\"#问题1：地图的注册\" class=\"headerlink\" title=\"问题1：地图的注册\"></a>问题1：地图的注册</h2><p><code>echarts</code>给出的接口是<code>echarts.registerMap(&#39;name&#39;, mapsSource)</code>进行注册</p>\n<p>我们需要使用接口请求本地或服务器来引入地图资源，这里我使用<code>axios</code>来请求本地资源进行导入，但是接口返回一直是404，经过一番搜索后发现，问题出现在地图资源的存放上，我将地图资源放到了<code>src/assets/maps/</code>下（具体为啥在了解后补充），应该放在<code>public</code>目录下，再后来又发现一种导入方式，就是直接<code>import</code>将地图资源导入，然后直接当参数传入即可使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mapSource from &#x27;@/assets/maps/chongqing.json&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">this.$echarts.registerMap(&quot;chongqing&quot;, mapSource);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题2：坐标的转换\"><a href=\"#问题2：坐标的转换\" class=\"headerlink\" title=\"问题2：坐标的转换\"></a>问题2：坐标的转换</h2><p>地图中类似雷达扫描的元素是一个加了动画的<code>div</code>，但是这个元素的位置需要根据接口返回的经纬度数据来决定（好尴尬😅，不知道咋弄……），经过一番百度，发现<code>echarts</code>提供了这个接口（更尴尬了……）。</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220601192920051.png\" alt=\"image-20220601192920051\"></p>\n<p>这个接口返回的是一个数组<code>[经度, 纬度]</code></p>\n<h2 id=\"问题3：整个地图区域设置渐变色\"><a href=\"#问题3：整个地图区域设置渐变色\" class=\"headerlink\" title=\"问题3：整个地图区域设置渐变色\"></a>问题3：整个地图区域设置渐变色</h2><p>最终效果如下图</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220615090706568.png\" alt=\"image-20220615090706568\"></p>\n<p><code>echarts</code>虽然提供了设置区域为渐变色的配置项（<code>itemStyle.areaColor</code>），但是设置的是单个区域的渐变，这会使得整个地图的每个区域都是分开的渐变，如下图</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220615091047043.png\" alt=\"image-20220615091047043\"></p>\n<p>经过一番查阅，得到了解决问题的灵感，既然<code>itemStyle.areaColor</code>设置的是单个区域的颜色，那么地图不要子区域不就行了，但是业务要求还需要子区域的选择，所以我们只要将<code>geo</code>的每个子区域的颜色设置为透明，这样就只有地图的边界线了，然后再设置<code>series.type[map]</code>为一个没有子区域的完成地图，再给其设置相应的渐变，这样就达成了我们的目的。perfect……😘</p>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-2e7v1g.png","excerpt":"","more":"<h1 id=\"使用地图坐标轴遇到的问题\"><a href=\"#使用地图坐标轴遇到的问题\" class=\"headerlink\" title=\"使用地图坐标轴遇到的问题\"></a>使用地图坐标轴遇到的问题</h1><p>近日，需要使用<code>echarts</code>做一个地图并渲染数据的场景，效果图如下，但是由于对<code>echarts</code>的使用并不是很熟练，所以特此记录一下过程中遇到的问题，以便日后参考~</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220601184948474.png\" alt=\"image-20220601184948474\"></p>\n<p>首先是地图资源的获取<a href=\"http://datav.aliyun.com/portal/school/atlas/area_selector#&lat=29.67402915372495&lng=121.56761992209837&zoom=8.5\">阿里DataV</a>，选择你想要的地图区域后下载即可，这里我下载的是<code>json</code>文件</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220601190336405.png\" alt=\"image-20220601190336405\"></p>\n<h2 id=\"问题1：地图的注册\"><a href=\"#问题1：地图的注册\" class=\"headerlink\" title=\"问题1：地图的注册\"></a>问题1：地图的注册</h2><p><code>echarts</code>给出的接口是<code>echarts.registerMap(&#39;name&#39;, mapsSource)</code>进行注册</p>\n<p>我们需要使用接口请求本地或服务器来引入地图资源，这里我使用<code>axios</code>来请求本地资源进行导入，但是接口返回一直是404，经过一番搜索后发现，问题出现在地图资源的存放上，我将地图资源放到了<code>src/assets/maps/</code>下（具体为啥在了解后补充），应该放在<code>public</code>目录下，再后来又发现一种导入方式，就是直接<code>import</code>将地图资源导入，然后直接当参数传入即可使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mapSource from &#x27;@/assets/maps/chongqing.json&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">this.$echarts.registerMap(&quot;chongqing&quot;, mapSource);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题2：坐标的转换\"><a href=\"#问题2：坐标的转换\" class=\"headerlink\" title=\"问题2：坐标的转换\"></a>问题2：坐标的转换</h2><p>地图中类似雷达扫描的元素是一个加了动画的<code>div</code>，但是这个元素的位置需要根据接口返回的经纬度数据来决定（好尴尬😅，不知道咋弄……），经过一番百度，发现<code>echarts</code>提供了这个接口（更尴尬了……）。</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220601192920051.png\" alt=\"image-20220601192920051\"></p>\n<p>这个接口返回的是一个数组<code>[经度, 纬度]</code></p>\n<h2 id=\"问题3：整个地图区域设置渐变色\"><a href=\"#问题3：整个地图区域设置渐变色\" class=\"headerlink\" title=\"问题3：整个地图区域设置渐变色\"></a>问题3：整个地图区域设置渐变色</h2><p>最终效果如下图</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220615090706568.png\" alt=\"image-20220615090706568\"></p>\n<p><code>echarts</code>虽然提供了设置区域为渐变色的配置项（<code>itemStyle.areaColor</code>），但是设置的是单个区域的渐变，这会使得整个地图的每个区域都是分开的渐变，如下图</p>\n<p><img src=\"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/img/image-20220615091047043.png\" alt=\"image-20220615091047043\"></p>\n<p>经过一番查阅，得到了解决问题的灵感，既然<code>itemStyle.areaColor</code>设置的是单个区域的颜色，那么地图不要子区域不就行了，但是业务要求还需要子区域的选择，所以我们只要将<code>geo</code>的每个子区域的颜色设置为透明，这样就只有地图的边界线了，然后再设置<code>series.type[map]</code>为一个没有子区域的完成地图，再给其设置相应的渐变，这样就达成了我们的目的。perfect……😘</p>\n"},{"title":"yarn全局安装后命令不起作用","date":"2022-05-15T09:41:52.000Z","_content":"\n# yarn全局安装后命令不起作用\n\n在之前的开发中一直在使用`yarn`来安装各种包，但一直存在`yarn global add xxx` 全局安装后该包的命令无法使用，当时也没在意，直接使用`npm i -g xxx`装一下就能用了😛。知道今天求知欲爆发，决定看看是咋回事儿~😜\n\n经过一番百度之后发现是因为没有给`yarn`配置环境变量😅\n\n## 解决方法\n\n执行\n\n```\nyarn global bin\n// C:\\Users\\userName\\AppData\\Local\\Yarn\\bin\n```\n\n将输出的路径添加到环境变量`path`中\n\n## 扩展\n\n我忽然想到一个问题，如果使用`npm`和`yarn`分别安装了同一个库的不同版本会怎么样~\n\n经过我一番简单的测试，我发现系统会优先使用`yarn`的，不知道是不是我配置了`NODE_PATH`为`yarn`的目录的原因🤣，具体等以后出了问题再深究吧（我太懒了😂）emmmmmm..................\n\n我觉得在安装全局库的时候可以只使用`npm`或只使用`yarn`，可能会避免一些`bug`吧，也方便管理，嘿嘿~\n","source":"_posts/problem/yarn/全局安装后命令不起作用.md","raw":"---\ntitle: yarn全局安装后命令不起作用\ndate: 2022-05-15 17:41:52\ntags:\n - yarn\n - problem\ncategories:\n - problem\n - yarn\n---\n\n# yarn全局安装后命令不起作用\n\n在之前的开发中一直在使用`yarn`来安装各种包，但一直存在`yarn global add xxx` 全局安装后该包的命令无法使用，当时也没在意，直接使用`npm i -g xxx`装一下就能用了😛。知道今天求知欲爆发，决定看看是咋回事儿~😜\n\n经过一番百度之后发现是因为没有给`yarn`配置环境变量😅\n\n## 解决方法\n\n执行\n\n```\nyarn global bin\n// C:\\Users\\userName\\AppData\\Local\\Yarn\\bin\n```\n\n将输出的路径添加到环境变量`path`中\n\n## 扩展\n\n我忽然想到一个问题，如果使用`npm`和`yarn`分别安装了同一个库的不同版本会怎么样~\n\n经过我一番简单的测试，我发现系统会优先使用`yarn`的，不知道是不是我配置了`NODE_PATH`为`yarn`的目录的原因🤣，具体等以后出了问题再深究吧（我太懒了😂）emmmmmm..................\n\n我觉得在安装全局库的时候可以只使用`npm`或只使用`yarn`，可能会避免一些`bug`吧，也方便管理，嘿嘿~\n","slug":"problem/yarn/全局安装后命令不起作用","published":1,"updated":"2022-05-27T13:14:18.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ewmvi8002h04wc4iw9ft60","content":"<h1 id=\"yarn全局安装后命令不起作用\"><a href=\"#yarn全局安装后命令不起作用\" class=\"headerlink\" title=\"yarn全局安装后命令不起作用\"></a>yarn全局安装后命令不起作用</h1><p>在之前的开发中一直在使用<code>yarn</code>来安装各种包，但一直存在<code>yarn global add xxx</code> 全局安装后该包的命令无法使用，当时也没在意，直接使用<code>npm i -g xxx</code>装一下就能用了😛。知道今天求知欲爆发，决定看看是咋回事儿~😜</p>\n<p>经过一番百度之后发现是因为没有给<code>yarn</code>配置环境变量😅</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global bin</span><br><span class=\"line\">// C:\\Users\\userName\\AppData\\Local\\Yarn\\bin</span><br></pre></td></tr></table></figure>\n\n<p>将输出的路径添加到环境变量<code>path</code>中</p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>我忽然想到一个问题，如果使用<code>npm</code>和<code>yarn</code>分别安装了同一个库的不同版本会怎么样~</p>\n<p>经过我一番简单的测试，我发现系统会优先使用<code>yarn</code>的，不知道是不是我配置了<code>NODE_PATH</code>为<code>yarn</code>的目录的原因🤣，具体等以后出了问题再深究吧（我太懒了😂）emmmmmm………………</p>\n<p>我觉得在安装全局库的时候可以只使用<code>npm</code>或只使用<code>yarn</code>，可能会避免一些<code>bug</code>吧，也方便管理，嘿嘿~</p>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-0prgo3.jpg","excerpt":"","more":"<h1 id=\"yarn全局安装后命令不起作用\"><a href=\"#yarn全局安装后命令不起作用\" class=\"headerlink\" title=\"yarn全局安装后命令不起作用\"></a>yarn全局安装后命令不起作用</h1><p>在之前的开发中一直在使用<code>yarn</code>来安装各种包，但一直存在<code>yarn global add xxx</code> 全局安装后该包的命令无法使用，当时也没在意，直接使用<code>npm i -g xxx</code>装一下就能用了😛。知道今天求知欲爆发，决定看看是咋回事儿~😜</p>\n<p>经过一番百度之后发现是因为没有给<code>yarn</code>配置环境变量😅</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global bin</span><br><span class=\"line\">// C:\\Users\\userName\\AppData\\Local\\Yarn\\bin</span><br></pre></td></tr></table></figure>\n\n<p>将输出的路径添加到环境变量<code>path</code>中</p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>我忽然想到一个问题，如果使用<code>npm</code>和<code>yarn</code>分别安装了同一个库的不同版本会怎么样~</p>\n<p>经过我一番简单的测试，我发现系统会优先使用<code>yarn</code>的，不知道是不是我配置了<code>NODE_PATH</code>为<code>yarn</code>的目录的原因🤣，具体等以后出了问题再深究吧（我太懒了😂）emmmmmm………………</p>\n<p>我觉得在安装全局库的时候可以只使用<code>npm</code>或只使用<code>yarn</code>，可能会避免一些<code>bug</code>吧，也方便管理，嘿嘿~</p>\n"},{"title":"运算符","date":"2022-05-31T01:30:03.000Z","_content":"#  运算符\n\n## 操作符和操作数\n\n操作符：运算符，参与运算的符号\n\n操作数：参与运算的数据，也称之为“元”\n\n操作符不一定只有一个符号\n\n```js\n// 比如\n() // 访问符，用于访问对象的属性\n[] // 访问符，用于访问对象的属性\n```\n\n操作符出现在不同的位置，可能具有不同的含义\n\n```js\n1-2 // 表示减\n-1.2 // 表示负号\n```\n\n## 表达式\n\n> **表达式 = 操作符 + 操作数**\n\n每个表达式都有一个运算结果，该结果叫做**返回值**，返回值的类型叫做**返回值类型**\n\n**所有的表达式都可以当做数据使用**\n\n```js\n1+1 // 这就是个表达式\n```\n\n如果是一个声明+赋值的表达式，返回的结果是`undefined`\n\n## 算术运算符\n\n- `+ - * /`【加减乘除】\n- `%`【求余】\n\n- `**`求幂\n\n> 1. 在`js`中数字运算是不精确的\n>\n> 2. 除数为0\n>\n>    如果被除数是正数，得到的结果为`Infinity`【正无穷】\n>\n>    如果被除数是负数，得到的结果为`-Infinity`【负无穷】\n>\n>    如果被除数是0，得到的结果为`NaN`【Not a Number】（非数字）\n>\n>    `NaN`、`Infinity`和`-Infinity`都是特殊的`Number`类型\n>\n>    `NaN`虽然是数字，但他和任何数字做任何运算都得到`NaN`\n>\n>    `isNaN()`：用于判断一个数据是否为`NaN`，返回值为`boolean`\n>\n>    `isFinite()`：用于判断一个数据是否有限，返回值为`boolean`\n\n- 自增（`++`）和自减（`--`）\n\n  `++`: 将某个**变量**的值自增1\n\n  `--`: 将某个**变量**的值自减1\n\n  > 自增和自减运算符只能作用于变量\n\n   - 位置不同得到的结果也不同\n\n     `x++/--`: 将变量`x`自增/减1，得到的表达式的值为自增/减之前的值\n\n     `++/--x`: 将变量`x`自增/减1，得到的表达式的值为自增/减之后的值\n\n  ```js\n  let x = 1;\n  console.log(x++); // 1\n  console.log(++x); // 2\n  ```\n\n### 优先级\n\n`++ --` > `* / % ` > `+ -`\n\n> 正确的运算方式：\n>\n> 1. 从左到右依次查看\n> 2. 如果遇到操作数，将数据的值直接取出（如：let x=1; x + x++ * ++x， 从左到右看，第一个x就直接取出,其值为1，不要管后面的x++、++x）\n> 3. 如果遇到相邻的两个运算符，并且左边的运算符优先级大于右边的运算符，则直接运行左边的运算符\n> 4. 当遇到小括号时，也应当从左到右看，遵循以上规则，不应该直接先算小括号里的，被惯性思维所迷惑\n\n```js\nlet x = 1;\nlet y = x + x++ * ( x = x + x++ * ++x ) + x; // 21\n```\n\n此种情况下，若先算小括号里的内容，结果就会算错！（别问我怎么知道的……😂）\n\n### 隐式类型转换\n\n1. 除`+`以外的算术运算符\n\n   将原始类型转换为数字类型（自动完成转换），然后进行运算\n\n   - `boolean`\n\n     - `true` ---> 1\n\n     - `false` ---> 0\n\n   - `string`\n     - 如果是一个字符串类型的数字（如：\"123\"），直接变为`number`类型\n     - 如果是一个非字符串类型的数字（如：\"hahaha\"），则得到`NaN`\n     - 可以识别`Infinity`和`-Infinity`\n     - 如果是一个空字符串则转换为0（字符串转换时，会忽略字符串中的空格）\n\n   ```js\n   // 只有加号和减号可以直接在数据前面转换，别的符号需要2个以上数据进行运算才会进行转换，否则会报错\n   // 其实直接在数据前使用加号和减号表示证号和负号\n   console.log(+\"Infinity\"); // Infinity\n   console.log(+Infinity); // Infinity\n   console.log(+\"\"); // 0\n   console.log(-\"123\"); // -123\n   console.log(+\"   123\"); // 123\n   console.log(+\"12321    12312\"); // NaN\n   ```\n\n   - `null` ---> 0\n   - `undefine`---> `NaN`\n   - `Object`\n     - `Object` ---> `\"[object object]\"` ---> `NaN`\n     - 转换流程：`Object` ---> `String` ---> `Number`\n\n2. 加号运算符\n\n   - 加号一边有字符串，含义变为字符串拼接，会将另一边的其他类型也转换为字符串\n     - `number` ---> `\"number\"`（字符串类型的数字）\n     - `boolean` ---> `\"boolean\"`（字符串类型的布尔）\n     - `undefined` ---> `\"undefined\"`（字符串类型的`undefined`）\n     - `Object` ---> `\"[object object]\"`（能看出来是个字符串吧~）\n   - 加号两边都没有字符串，但一边有对象，将对象转换为字符串，然后按照上面的规则进行\n\n> 类型转换并不会改变原本的数据类型，只在运算的时候起作用\n\n## 比较运算符\n\n大小比较：`>\t<\t>=\t<=`\n\n相等比较：`==\t!=\t===\t!==`\n\n**比较运算符的返回值类型：`boolean`**\n\n**算术比较符的优先级大于比较运算符的优先级**\n\n```js\nconsole.log(2 + 3 >= 5); // true\n// 先运算 2+3 后比较\n```\n\n>- 大小比较\n>\n>1. 两个字符串比较大小，比较的是字符串的`ASCLL`码\n>\n>2. 如果一方不是字符串，且两方都是原始类型，他们将转换为数字类型进行比较\n>\n>  `'1'` ---> 1\n>\n>  `''` ---> 0\n>\n>  ..........（与隐式转换的规则相同）\n>\n>  `NaN`与任何数据（包括它本身）比较都是`false`\n>\n>  `Infinity`比任何数字都大\n>\n>  `-Infinity`比任何数字都小\n>\n>3. 如果其中一方是对象，将对象转换为原始类型后比较\n>\n>- 相等比较\n>\n>1. 两端的数据类型相同，直接比较两个数据本身是否相同（两个对象则比较地址）\n>\n>2. 两端类型不同\n>\n>  1）`null`和`undefined`之间相等，但是和其他原始类型比较则不相等（如：`null`== 0  为`false`）\n>\n>  2） 其他原始类型比较时先转换为数字再进行比较\n>\n>  3） `NaN`与任何数字都不相等（包括它自身）\n>\n>  4）`Infinity`和`-Infinity`只能和它自身相等\n>\n>  5） 对象比较时，要先转换为原始类型后再进行比较\n>\n>  **由于相等（`==`）和不相等（`!=1`）比较,对于不同类型的数据比较存在很多不合理的地方，因此，通常我们不适用这种方式进行比较，而是使用更加合理的严格相等（`===`）和严格不相等（`!==`）来进行比较**\n>\n>- 严格相等和严格不相等\n>\n>  `===`: 所比较的两方**数据和数据类型必须相同**才为`true`，否则为`false`\n>\n>  `!==`: 所比较的两方**数据或类型不同**为`true`，否则为`false`\n\n## 逻辑运算符\n\n- 与（并且）\n\n  符号: `&&`\n\n  书写方式: `表达式1 && 表达式2`\n\n  > 先对表达式1进行`boolean`判断\n  >\n  > 若为`true`则对表达式2进行判断；\n  >\n  > 若表达式1未`false`，则直接返回`false`，后面的就不管了\n  >\n  > **总结一句：与符号返回的是第一个判断为`false`的表达式**（短路规则）\n\n  以下数据均判断为`false`\n\n  1） `null`\n\n  2）`undefined`\n\n  3） `false`\n\n  4） `NaN`\n\n  5） `''`\n\n  6）`0`\n\n- 或\n\n  符号：`||`\n\n  书写方式：`表达式1 || 表达式2`\n\n  >先对表达式1进行`boolean`判断\n  >\n  >若为`true`则直接返回，后面的就不管了\n  >\n  >若表达式1为`false`则对表达式2进行判断\n  >\n  >**总结一句：或符号返回的是第一个判断为`true`的表达式**（和与符号真好相反）\n\n- 非\n\n  符号：`!`\n\n  书写方式：`!数据`\n\n  > 将数据的`boolean`判定结果直接取反，非运算符一定返回`boolean`类型\n\n## 三目运算符\n\n书写方式：`表达式1 ?  表达式2  :  表达式3`\n\n> 对表达式1进行`boolean`判断，若为`true`返回表达式2，若为`false`返回表达式3\n\n## 其他运算符\n\n- `+=   -+   *=   /=  %=  **=`\n\n```js\nlet x = 2;\nx += 1; // 等同于 x = x + 1\nx -= 1; // 等同于 x = x - 1\nx *= 1; // 等同于 x = x * 1\nx *= 1 + 2; // 等同于 x = x * (1 + 2)\nx /= 1; // 等同于 x = x / 1;\nx %= 1; // 等同于 x = x % 1;\nx **= 2; // 等同于 x = x ** 2\n```\n\n- `void运算符`\n\n  书写方式 : `void 表达式`或`void(表达式)`\n\n  运行表达式，然后返回`undefined`（额，貌似没啥用……）\n\n- `typeof运算符`\n\n  书写方式 : `typeof 表达式`或`typeof(表达式)`\n\n  返回表达式的类型，是一个字符串\n\n  `typeof`运算符的优先级高于算术运算符，所以建议使用第二种方式，可以避免一些错误\n\n- 逗号运算符\n\n  书写方式 : `表达式1 , 表达式2`\n\n  依次运行两个（个数不固定，有几个运行几个）表达式，返回表达式2（返回最后一个表达式）\n\n  逗号运算符的优先级比赋值符号还低\n\n\n\n","source":"_posts/JS/4.运算符.md","raw":"---\ntitle: 运算符\ndate: 2022-05-31 09:30:03\ntags: JavaScript\ncategories:\n - JavaScript\n---\n#  运算符\n\n## 操作符和操作数\n\n操作符：运算符，参与运算的符号\n\n操作数：参与运算的数据，也称之为“元”\n\n操作符不一定只有一个符号\n\n```js\n// 比如\n() // 访问符，用于访问对象的属性\n[] // 访问符，用于访问对象的属性\n```\n\n操作符出现在不同的位置，可能具有不同的含义\n\n```js\n1-2 // 表示减\n-1.2 // 表示负号\n```\n\n## 表达式\n\n> **表达式 = 操作符 + 操作数**\n\n每个表达式都有一个运算结果，该结果叫做**返回值**，返回值的类型叫做**返回值类型**\n\n**所有的表达式都可以当做数据使用**\n\n```js\n1+1 // 这就是个表达式\n```\n\n如果是一个声明+赋值的表达式，返回的结果是`undefined`\n\n## 算术运算符\n\n- `+ - * /`【加减乘除】\n- `%`【求余】\n\n- `**`求幂\n\n> 1. 在`js`中数字运算是不精确的\n>\n> 2. 除数为0\n>\n>    如果被除数是正数，得到的结果为`Infinity`【正无穷】\n>\n>    如果被除数是负数，得到的结果为`-Infinity`【负无穷】\n>\n>    如果被除数是0，得到的结果为`NaN`【Not a Number】（非数字）\n>\n>    `NaN`、`Infinity`和`-Infinity`都是特殊的`Number`类型\n>\n>    `NaN`虽然是数字，但他和任何数字做任何运算都得到`NaN`\n>\n>    `isNaN()`：用于判断一个数据是否为`NaN`，返回值为`boolean`\n>\n>    `isFinite()`：用于判断一个数据是否有限，返回值为`boolean`\n\n- 自增（`++`）和自减（`--`）\n\n  `++`: 将某个**变量**的值自增1\n\n  `--`: 将某个**变量**的值自减1\n\n  > 自增和自减运算符只能作用于变量\n\n   - 位置不同得到的结果也不同\n\n     `x++/--`: 将变量`x`自增/减1，得到的表达式的值为自增/减之前的值\n\n     `++/--x`: 将变量`x`自增/减1，得到的表达式的值为自增/减之后的值\n\n  ```js\n  let x = 1;\n  console.log(x++); // 1\n  console.log(++x); // 2\n  ```\n\n### 优先级\n\n`++ --` > `* / % ` > `+ -`\n\n> 正确的运算方式：\n>\n> 1. 从左到右依次查看\n> 2. 如果遇到操作数，将数据的值直接取出（如：let x=1; x + x++ * ++x， 从左到右看，第一个x就直接取出,其值为1，不要管后面的x++、++x）\n> 3. 如果遇到相邻的两个运算符，并且左边的运算符优先级大于右边的运算符，则直接运行左边的运算符\n> 4. 当遇到小括号时，也应当从左到右看，遵循以上规则，不应该直接先算小括号里的，被惯性思维所迷惑\n\n```js\nlet x = 1;\nlet y = x + x++ * ( x = x + x++ * ++x ) + x; // 21\n```\n\n此种情况下，若先算小括号里的内容，结果就会算错！（别问我怎么知道的……😂）\n\n### 隐式类型转换\n\n1. 除`+`以外的算术运算符\n\n   将原始类型转换为数字类型（自动完成转换），然后进行运算\n\n   - `boolean`\n\n     - `true` ---> 1\n\n     - `false` ---> 0\n\n   - `string`\n     - 如果是一个字符串类型的数字（如：\"123\"），直接变为`number`类型\n     - 如果是一个非字符串类型的数字（如：\"hahaha\"），则得到`NaN`\n     - 可以识别`Infinity`和`-Infinity`\n     - 如果是一个空字符串则转换为0（字符串转换时，会忽略字符串中的空格）\n\n   ```js\n   // 只有加号和减号可以直接在数据前面转换，别的符号需要2个以上数据进行运算才会进行转换，否则会报错\n   // 其实直接在数据前使用加号和减号表示证号和负号\n   console.log(+\"Infinity\"); // Infinity\n   console.log(+Infinity); // Infinity\n   console.log(+\"\"); // 0\n   console.log(-\"123\"); // -123\n   console.log(+\"   123\"); // 123\n   console.log(+\"12321    12312\"); // NaN\n   ```\n\n   - `null` ---> 0\n   - `undefine`---> `NaN`\n   - `Object`\n     - `Object` ---> `\"[object object]\"` ---> `NaN`\n     - 转换流程：`Object` ---> `String` ---> `Number`\n\n2. 加号运算符\n\n   - 加号一边有字符串，含义变为字符串拼接，会将另一边的其他类型也转换为字符串\n     - `number` ---> `\"number\"`（字符串类型的数字）\n     - `boolean` ---> `\"boolean\"`（字符串类型的布尔）\n     - `undefined` ---> `\"undefined\"`（字符串类型的`undefined`）\n     - `Object` ---> `\"[object object]\"`（能看出来是个字符串吧~）\n   - 加号两边都没有字符串，但一边有对象，将对象转换为字符串，然后按照上面的规则进行\n\n> 类型转换并不会改变原本的数据类型，只在运算的时候起作用\n\n## 比较运算符\n\n大小比较：`>\t<\t>=\t<=`\n\n相等比较：`==\t!=\t===\t!==`\n\n**比较运算符的返回值类型：`boolean`**\n\n**算术比较符的优先级大于比较运算符的优先级**\n\n```js\nconsole.log(2 + 3 >= 5); // true\n// 先运算 2+3 后比较\n```\n\n>- 大小比较\n>\n>1. 两个字符串比较大小，比较的是字符串的`ASCLL`码\n>\n>2. 如果一方不是字符串，且两方都是原始类型，他们将转换为数字类型进行比较\n>\n>  `'1'` ---> 1\n>\n>  `''` ---> 0\n>\n>  ..........（与隐式转换的规则相同）\n>\n>  `NaN`与任何数据（包括它本身）比较都是`false`\n>\n>  `Infinity`比任何数字都大\n>\n>  `-Infinity`比任何数字都小\n>\n>3. 如果其中一方是对象，将对象转换为原始类型后比较\n>\n>- 相等比较\n>\n>1. 两端的数据类型相同，直接比较两个数据本身是否相同（两个对象则比较地址）\n>\n>2. 两端类型不同\n>\n>  1）`null`和`undefined`之间相等，但是和其他原始类型比较则不相等（如：`null`== 0  为`false`）\n>\n>  2） 其他原始类型比较时先转换为数字再进行比较\n>\n>  3） `NaN`与任何数字都不相等（包括它自身）\n>\n>  4）`Infinity`和`-Infinity`只能和它自身相等\n>\n>  5） 对象比较时，要先转换为原始类型后再进行比较\n>\n>  **由于相等（`==`）和不相等（`!=1`）比较,对于不同类型的数据比较存在很多不合理的地方，因此，通常我们不适用这种方式进行比较，而是使用更加合理的严格相等（`===`）和严格不相等（`!==`）来进行比较**\n>\n>- 严格相等和严格不相等\n>\n>  `===`: 所比较的两方**数据和数据类型必须相同**才为`true`，否则为`false`\n>\n>  `!==`: 所比较的两方**数据或类型不同**为`true`，否则为`false`\n\n## 逻辑运算符\n\n- 与（并且）\n\n  符号: `&&`\n\n  书写方式: `表达式1 && 表达式2`\n\n  > 先对表达式1进行`boolean`判断\n  >\n  > 若为`true`则对表达式2进行判断；\n  >\n  > 若表达式1未`false`，则直接返回`false`，后面的就不管了\n  >\n  > **总结一句：与符号返回的是第一个判断为`false`的表达式**（短路规则）\n\n  以下数据均判断为`false`\n\n  1） `null`\n\n  2）`undefined`\n\n  3） `false`\n\n  4） `NaN`\n\n  5） `''`\n\n  6）`0`\n\n- 或\n\n  符号：`||`\n\n  书写方式：`表达式1 || 表达式2`\n\n  >先对表达式1进行`boolean`判断\n  >\n  >若为`true`则直接返回，后面的就不管了\n  >\n  >若表达式1为`false`则对表达式2进行判断\n  >\n  >**总结一句：或符号返回的是第一个判断为`true`的表达式**（和与符号真好相反）\n\n- 非\n\n  符号：`!`\n\n  书写方式：`!数据`\n\n  > 将数据的`boolean`判定结果直接取反，非运算符一定返回`boolean`类型\n\n## 三目运算符\n\n书写方式：`表达式1 ?  表达式2  :  表达式3`\n\n> 对表达式1进行`boolean`判断，若为`true`返回表达式2，若为`false`返回表达式3\n\n## 其他运算符\n\n- `+=   -+   *=   /=  %=  **=`\n\n```js\nlet x = 2;\nx += 1; // 等同于 x = x + 1\nx -= 1; // 等同于 x = x - 1\nx *= 1; // 等同于 x = x * 1\nx *= 1 + 2; // 等同于 x = x * (1 + 2)\nx /= 1; // 等同于 x = x / 1;\nx %= 1; // 等同于 x = x % 1;\nx **= 2; // 等同于 x = x ** 2\n```\n\n- `void运算符`\n\n  书写方式 : `void 表达式`或`void(表达式)`\n\n  运行表达式，然后返回`undefined`（额，貌似没啥用……）\n\n- `typeof运算符`\n\n  书写方式 : `typeof 表达式`或`typeof(表达式)`\n\n  返回表达式的类型，是一个字符串\n\n  `typeof`运算符的优先级高于算术运算符，所以建议使用第二种方式，可以避免一些错误\n\n- 逗号运算符\n\n  书写方式 : `表达式1 , 表达式2`\n\n  依次运行两个（个数不固定，有几个运行几个）表达式，返回表达式2（返回最后一个表达式）\n\n  逗号运算符的优先级比赋值符号还低\n\n\n\n","slug":"JS/4.运算符","published":1,"updated":"2022-06-07T05:26:59.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4t7natp0000t0wce5snhe18","content":"<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><h2 id=\"操作符和操作数\"><a href=\"#操作符和操作数\" class=\"headerlink\" title=\"操作符和操作数\"></a>操作符和操作数</h2><p>操作符：运算符，参与运算的符号</p>\n<p>操作数：参与运算的数据，也称之为“元”</p>\n<p>操作符不一定只有一个符号</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 比如</span></span><br><span class=\"line\">() <span class=\"comment\">// 访问符，用于访问对象的属性</span></span><br><span class=\"line\">[] <span class=\"comment\">// 访问符，用于访问对象的属性</span></span><br></pre></td></tr></table></figure>\n\n<p>操作符出现在不同的位置，可能具有不同的含义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>-<span class=\"number\">2</span> <span class=\"comment\">// 表示减</span></span><br><span class=\"line\">-<span class=\"number\">1.2</span> <span class=\"comment\">// 表示负号</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><blockquote>\n<p><strong>表达式 = 操作符 + 操作数</strong></p>\n</blockquote>\n<p>每个表达式都有一个运算结果，该结果叫做<strong>返回值</strong>，返回值的类型叫做<strong>返回值类型</strong></p>\n<p><strong>所有的表达式都可以当做数据使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>+<span class=\"number\">1</span> <span class=\"comment\">// 这就是个表达式</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是一个声明+赋值的表达式，返回的结果是<code>undefined</code></p>\n<h2 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><ul>\n<li><p><code>+ - * /</code>【加减乘除】</p>\n</li>\n<li><p><code>%</code>【求余】</p>\n</li>\n<li><p><code>**</code>求幂</p>\n</li>\n</ul>\n<blockquote>\n<ol>\n<li><p>在<code>js</code>中数字运算是不精确的</p>\n</li>\n<li><p>除数为0</p>\n<p>如果被除数是正数，得到的结果为<code>Infinity</code>【正无穷】</p>\n<p>如果被除数是负数，得到的结果为<code>-Infinity</code>【负无穷】</p>\n<p>如果被除数是0，得到的结果为<code>NaN</code>【Not a Number】（非数字）</p>\n<p><code>NaN</code>、<code>Infinity</code>和<code>-Infinity</code>都是特殊的<code>Number</code>类型</p>\n<p><code>NaN</code>虽然是数字，但他和任何数字做任何运算都得到<code>NaN</code></p>\n<p><code>isNaN()</code>：用于判断一个数据是否为<code>NaN</code>，返回值为<code>boolean</code></p>\n<p><code>isFinite()</code>：用于判断一个数据是否有限，返回值为<code>boolean</code></p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li><p>自增（<code>++</code>）和自减（<code>--</code>）</p>\n<p><code>++</code>: 将某个<strong>变量</strong>的值自增1</p>\n<p><code>--</code>: 将某个<strong>变量</strong>的值自减1</p>\n<blockquote>\n<p>自增和自减运算符只能作用于变量</p>\n</blockquote>\n<ul>\n<li><p>位置不同得到的结果也不同</p>\n<p><code>x++/--</code>: 将变量<code>x</code>自增/减1，得到的表达式的值为自增/减之前的值</p>\n<p><code>++/--x</code>: 将变量<code>x</code>自增/减1，得到的表达式的值为自增/减之后的值</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x++); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(++x); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><p><code>++ --</code> &gt; <code>* / % </code> &gt; <code>+ -</code></p>\n<blockquote>\n<p>正确的运算方式：</p>\n<ol>\n<li>从左到右依次查看</li>\n<li>如果遇到操作数，将数据的值直接取出（如：let x=1; x + x++ * ++x， 从左到右看，第一个x就直接取出,其值为1，不要管后面的x++、++x）</li>\n<li>如果遇到相邻的两个运算符，并且左边的运算符优先级大于右边的运算符，则直接运行左边的运算符</li>\n<li>当遇到小括号时，也应当从左到右看，遵循以上规则，不应该直接先算小括号里的，被惯性思维所迷惑</li>\n</ol>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = x + x++ * ( x = x + x++ * ++x ) + x; <span class=\"comment\">// 21</span></span><br></pre></td></tr></table></figure>\n\n<p>此种情况下，若先算小括号里的内容，结果就会算错！（别问我怎么知道的……😂）</p>\n<h3 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h3><ol>\n<li><p>除<code>+</code>以外的算术运算符</p>\n<p>将原始类型转换为数字类型（自动完成转换），然后进行运算</p>\n<ul>\n<li><p><code>boolean</code></p>\n<ul>\n<li><p><code>true</code> —&gt; 1</p>\n</li>\n<li><p><code>false</code> —&gt; 0</p>\n</li>\n</ul>\n</li>\n<li><p><code>string</code></p>\n<ul>\n<li>如果是一个字符串类型的数字（如：”123”），直接变为<code>number</code>类型</li>\n<li>如果是一个非字符串类型的数字（如：”hahaha”），则得到<code>NaN</code></li>\n<li>可以识别<code>Infinity</code>和<code>-Infinity</code></li>\n<li>如果是一个空字符串则转换为0（字符串转换时，会忽略字符串中的空格）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只有加号和减号可以直接在数据前面转换，别的符号需要2个以上数据进行运算才会进行转换，否则会报错</span></span><br><span class=\"line\"><span class=\"comment\">// 其实直接在数据前使用加号和减号表示证号和负号</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+<span class=\"string\">&quot;Infinity&quot;</span>); <span class=\"comment\">// Infinity</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+<span class=\"title class_\">Infinity</span>); <span class=\"comment\">// Infinity</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+<span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(-<span class=\"string\">&quot;123&quot;</span>); <span class=\"comment\">// -123</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+<span class=\"string\">&quot;   123&quot;</span>); <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+<span class=\"string\">&quot;12321    12312&quot;</span>); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>null</code> —&gt; 0</li>\n<li><code>undefine</code>—&gt; <code>NaN</code></li>\n<li><code>Object</code><ul>\n<li><code>Object</code> —&gt; <code>&quot;[object object]&quot;</code> —&gt; <code>NaN</code></li>\n<li>转换流程：<code>Object</code> —&gt; <code>String</code> —&gt; <code>Number</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>加号运算符</p>\n<ul>\n<li>加号一边有字符串，含义变为字符串拼接，会将另一边的其他类型也转换为字符串<ul>\n<li><code>number</code> —&gt; <code>&quot;number&quot;</code>（字符串类型的数字）</li>\n<li><code>boolean</code> —&gt; <code>&quot;boolean&quot;</code>（字符串类型的布尔）</li>\n<li><code>undefined</code> —&gt; <code>&quot;undefined&quot;</code>（字符串类型的<code>undefined</code>）</li>\n<li><code>Object</code> —&gt; <code>&quot;[object object]&quot;</code>（能看出来是个字符串吧~）</li>\n</ul>\n</li>\n<li>加号两边都没有字符串，但一边有对象，将对象转换为字符串，然后按照上面的规则进行</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>类型转换并不会改变原本的数据类型，只在运算的时候起作用</p>\n</blockquote>\n<h2 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h2><p>大小比较：<code>&gt;    &lt;    &gt;=    &lt;=</code></p>\n<p>相等比较：<code>==    !=    ===    !==</code></p>\n<p><strong>比较运算符的返回值类型：<code>boolean</code></strong></p>\n<p><strong>算术比较符的优先级大于比较运算符的优先级</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span> + <span class=\"number\">3</span> &gt;= <span class=\"number\">5</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 先运算 2+3 后比较</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>大小比较</li>\n</ul>\n<ol>\n<li><p>两个字符串比较大小，比较的是字符串的<code>ASCLL</code>码</p>\n</li>\n<li><p>如果一方不是字符串，且两方都是原始类型，他们将转换为数字类型进行比较</p>\n</li>\n</ol>\n<p> <code>&#39;1&#39;</code> —&gt; 1</p>\n<p> <code>&#39;&#39;</code> —&gt; 0</p>\n<p> ……….（与隐式转换的规则相同）</p>\n<p> <code>NaN</code>与任何数据（包括它本身）比较都是<code>false</code></p>\n<p> <code>Infinity</code>比任何数字都大</p>\n<p> <code>-Infinity</code>比任何数字都小</p>\n<ol start=\"3\">\n<li>如果其中一方是对象，将对象转换为原始类型后比较</li>\n</ol>\n<ul>\n<li>相等比较</li>\n</ul>\n<ol>\n<li><p>两端的数据类型相同，直接比较两个数据本身是否相同（两个对象则比较地址）</p>\n</li>\n<li><p>两端类型不同</p>\n</li>\n</ol>\n<p> 1）<code>null</code>和<code>undefined</code>之间相等，但是和其他原始类型比较则不相等（如：<code>null</code>== 0  为<code>false</code>）</p>\n<p> 2） 其他原始类型比较时先转换为数字再进行比较</p>\n<p> 3） <code>NaN</code>与任何数字都不相等（包括它自身）</p>\n<p> 4）<code>Infinity</code>和<code>-Infinity</code>只能和它自身相等</p>\n<p> 5） 对象比较时，要先转换为原始类型后再进行比较</p>\n<p> <strong>由于相等（<code>==</code>）和不相等（<code>!=1</code>）比较,对于不同类型的数据比较存在很多不合理的地方，因此，通常我们不适用这种方式进行比较，而是使用更加合理的严格相等（<code>===</code>）和严格不相等（<code>!==</code>）来进行比较</strong></p>\n<ul>\n<li>严格相等和严格不相等</li>\n</ul>\n<p> <code>===</code>: 所比较的两方<strong>数据和数据类型必须相同</strong>才为<code>true</code>，否则为<code>false</code></p>\n<p> <code>!==</code>: 所比较的两方<strong>数据或类型不同</strong>为<code>true</code>，否则为<code>false</code></p>\n</blockquote>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><ul>\n<li><p>与（并且）</p>\n<p>符号: <code>&amp;&amp;</code></p>\n<p>书写方式: <code>表达式1 &amp;&amp; 表达式2</code></p>\n<blockquote>\n<p>先对表达式1进行<code>boolean</code>判断</p>\n<p>若为<code>true</code>则对表达式2进行判断；</p>\n<p>若表达式1未<code>false</code>，则直接返回<code>false</code>，后面的就不管了</p>\n<p><strong>总结一句：与符号返回的是第一个判断为<code>false</code>的表达式</strong>（短路规则）</p>\n</blockquote>\n<p>以下数据均判断为<code>false</code></p>\n<p>1） <code>null</code></p>\n<p>2）<code>undefined</code></p>\n<p>3） <code>false</code></p>\n<p>4） <code>NaN</code></p>\n<p>5） <code>&#39;&#39;</code></p>\n<p>6）<code>0</code></p>\n</li>\n<li><p>或</p>\n<p>符号：<code>||</code></p>\n<p>书写方式：<code>表达式1 || 表达式2</code></p>\n<blockquote>\n<p>先对表达式1进行<code>boolean</code>判断</p>\n<p>若为<code>true</code>则直接返回，后面的就不管了</p>\n<p>若表达式1为<code>false</code>则对表达式2进行判断</p>\n<p><strong>总结一句：或符号返回的是第一个判断为<code>true</code>的表达式</strong>（和与符号真好相反）</p>\n</blockquote>\n</li>\n<li><p>非</p>\n<p>符号：<code>!</code></p>\n<p>书写方式：<code>!数据</code></p>\n<blockquote>\n<p>将数据的<code>boolean</code>判定结果直接取反，非运算符一定返回<code>boolean</code>类型</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"三目运算符\"><a href=\"#三目运算符\" class=\"headerlink\" title=\"三目运算符\"></a>三目运算符</h2><p>书写方式：<code>表达式1 ?  表达式2  :  表达式3</code></p>\n<blockquote>\n<p>对表达式1进行<code>boolean</code>判断，若为<code>true</code>返回表达式2，若为<code>false</code>返回表达式3</p>\n</blockquote>\n<h2 id=\"其他运算符\"><a href=\"#其他运算符\" class=\"headerlink\" title=\"其他运算符\"></a>其他运算符</h2><ul>\n<li><code>+=   -+   *=   /=  %=  **=</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">x += <span class=\"number\">1</span>; <span class=\"comment\">// 等同于 x = x + 1</span></span><br><span class=\"line\">x -= <span class=\"number\">1</span>; <span class=\"comment\">// 等同于 x = x - 1</span></span><br><span class=\"line\">x *= <span class=\"number\">1</span>; <span class=\"comment\">// 等同于 x = x * 1</span></span><br><span class=\"line\">x *= <span class=\"number\">1</span> + <span class=\"number\">2</span>; <span class=\"comment\">// 等同于 x = x * (1 + 2)</span></span><br><span class=\"line\">x /= <span class=\"number\">1</span>; <span class=\"comment\">// 等同于 x = x / 1;</span></span><br><span class=\"line\">x %= <span class=\"number\">1</span>; <span class=\"comment\">// 等同于 x = x % 1;</span></span><br><span class=\"line\">x **= <span class=\"number\">2</span>; <span class=\"comment\">// 等同于 x = x ** 2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>void运算符</code></p>\n<p>书写方式 : <code>void 表达式</code>或<code>void(表达式)</code></p>\n<p>运行表达式，然后返回<code>undefined</code>（额，貌似没啥用……）</p>\n</li>\n<li><p><code>typeof运算符</code></p>\n<p>书写方式 : <code>typeof 表达式</code>或<code>typeof(表达式)</code></p>\n<p>返回表达式的类型，是一个字符串</p>\n<p><code>typeof</code>运算符的优先级高于算术运算符，所以建议使用第二种方式，可以避免一些错误</p>\n</li>\n<li><p>逗号运算符</p>\n<p>书写方式 : <code>表达式1 , 表达式2</code></p>\n<p>依次运行两个（个数不固定，有几个运行几个）表达式，返回表达式2（返回最后一个表达式）</p>\n<p>逗号运算符的优先级比赋值符号还低</p>\n</li>\n</ul>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-2e7v1g.png","excerpt":"","more":"<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><h2 id=\"操作符和操作数\"><a href=\"#操作符和操作数\" class=\"headerlink\" title=\"操作符和操作数\"></a>操作符和操作数</h2><p>操作符：运算符，参与运算的符号</p>\n<p>操作数：参与运算的数据，也称之为“元”</p>\n<p>操作符不一定只有一个符号</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 比如</span></span><br><span class=\"line\">() <span class=\"comment\">// 访问符，用于访问对象的属性</span></span><br><span class=\"line\">[] <span class=\"comment\">// 访问符，用于访问对象的属性</span></span><br></pre></td></tr></table></figure>\n\n<p>操作符出现在不同的位置，可能具有不同的含义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>-<span class=\"number\">2</span> <span class=\"comment\">// 表示减</span></span><br><span class=\"line\">-<span class=\"number\">1.2</span> <span class=\"comment\">// 表示负号</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><blockquote>\n<p><strong>表达式 = 操作符 + 操作数</strong></p>\n</blockquote>\n<p>每个表达式都有一个运算结果，该结果叫做<strong>返回值</strong>，返回值的类型叫做<strong>返回值类型</strong></p>\n<p><strong>所有的表达式都可以当做数据使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>+<span class=\"number\">1</span> <span class=\"comment\">// 这就是个表达式</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是一个声明+赋值的表达式，返回的结果是<code>undefined</code></p>\n<h2 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><ul>\n<li><p><code>+ - * /</code>【加减乘除】</p>\n</li>\n<li><p><code>%</code>【求余】</p>\n</li>\n<li><p><code>**</code>求幂</p>\n</li>\n</ul>\n<blockquote>\n<ol>\n<li><p>在<code>js</code>中数字运算是不精确的</p>\n</li>\n<li><p>除数为0</p>\n<p>如果被除数是正数，得到的结果为<code>Infinity</code>【正无穷】</p>\n<p>如果被除数是负数，得到的结果为<code>-Infinity</code>【负无穷】</p>\n<p>如果被除数是0，得到的结果为<code>NaN</code>【Not a Number】（非数字）</p>\n<p><code>NaN</code>、<code>Infinity</code>和<code>-Infinity</code>都是特殊的<code>Number</code>类型</p>\n<p><code>NaN</code>虽然是数字，但他和任何数字做任何运算都得到<code>NaN</code></p>\n<p><code>isNaN()</code>：用于判断一个数据是否为<code>NaN</code>，返回值为<code>boolean</code></p>\n<p><code>isFinite()</code>：用于判断一个数据是否有限，返回值为<code>boolean</code></p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li><p>自增（<code>++</code>）和自减（<code>--</code>）</p>\n<p><code>++</code>: 将某个<strong>变量</strong>的值自增1</p>\n<p><code>--</code>: 将某个<strong>变量</strong>的值自减1</p>\n<blockquote>\n<p>自增和自减运算符只能作用于变量</p>\n</blockquote>\n<ul>\n<li><p>位置不同得到的结果也不同</p>\n<p><code>x++/--</code>: 将变量<code>x</code>自增/减1，得到的表达式的值为自增/减之前的值</p>\n<p><code>++/--x</code>: 将变量<code>x</code>自增/减1，得到的表达式的值为自增/减之后的值</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x++); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(++x); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><p><code>++ --</code> &gt; <code>* / % </code> &gt; <code>+ -</code></p>\n<blockquote>\n<p>正确的运算方式：</p>\n<ol>\n<li>从左到右依次查看</li>\n<li>如果遇到操作数，将数据的值直接取出（如：let x=1; x + x++ * ++x， 从左到右看，第一个x就直接取出,其值为1，不要管后面的x++、++x）</li>\n<li>如果遇到相邻的两个运算符，并且左边的运算符优先级大于右边的运算符，则直接运行左边的运算符</li>\n<li>当遇到小括号时，也应当从左到右看，遵循以上规则，不应该直接先算小括号里的，被惯性思维所迷惑</li>\n</ol>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = x + x++ * ( x = x + x++ * ++x ) + x; <span class=\"comment\">// 21</span></span><br></pre></td></tr></table></figure>\n\n<p>此种情况下，若先算小括号里的内容，结果就会算错！（别问我怎么知道的……😂）</p>\n<h3 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h3><ol>\n<li><p>除<code>+</code>以外的算术运算符</p>\n<p>将原始类型转换为数字类型（自动完成转换），然后进行运算</p>\n<ul>\n<li><p><code>boolean</code></p>\n<ul>\n<li><p><code>true</code> —&gt; 1</p>\n</li>\n<li><p><code>false</code> —&gt; 0</p>\n</li>\n</ul>\n</li>\n<li><p><code>string</code></p>\n<ul>\n<li>如果是一个字符串类型的数字（如：”123”），直接变为<code>number</code>类型</li>\n<li>如果是一个非字符串类型的数字（如：”hahaha”），则得到<code>NaN</code></li>\n<li>可以识别<code>Infinity</code>和<code>-Infinity</code></li>\n<li>如果是一个空字符串则转换为0（字符串转换时，会忽略字符串中的空格）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只有加号和减号可以直接在数据前面转换，别的符号需要2个以上数据进行运算才会进行转换，否则会报错</span></span><br><span class=\"line\"><span class=\"comment\">// 其实直接在数据前使用加号和减号表示证号和负号</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+<span class=\"string\">&quot;Infinity&quot;</span>); <span class=\"comment\">// Infinity</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+<span class=\"title class_\">Infinity</span>); <span class=\"comment\">// Infinity</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+<span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(-<span class=\"string\">&quot;123&quot;</span>); <span class=\"comment\">// -123</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+<span class=\"string\">&quot;   123&quot;</span>); <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+<span class=\"string\">&quot;12321    12312&quot;</span>); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>null</code> —&gt; 0</li>\n<li><code>undefine</code>—&gt; <code>NaN</code></li>\n<li><code>Object</code><ul>\n<li><code>Object</code> —&gt; <code>&quot;[object object]&quot;</code> —&gt; <code>NaN</code></li>\n<li>转换流程：<code>Object</code> —&gt; <code>String</code> —&gt; <code>Number</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>加号运算符</p>\n<ul>\n<li>加号一边有字符串，含义变为字符串拼接，会将另一边的其他类型也转换为字符串<ul>\n<li><code>number</code> —&gt; <code>&quot;number&quot;</code>（字符串类型的数字）</li>\n<li><code>boolean</code> —&gt; <code>&quot;boolean&quot;</code>（字符串类型的布尔）</li>\n<li><code>undefined</code> —&gt; <code>&quot;undefined&quot;</code>（字符串类型的<code>undefined</code>）</li>\n<li><code>Object</code> —&gt; <code>&quot;[object object]&quot;</code>（能看出来是个字符串吧~）</li>\n</ul>\n</li>\n<li>加号两边都没有字符串，但一边有对象，将对象转换为字符串，然后按照上面的规则进行</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>类型转换并不会改变原本的数据类型，只在运算的时候起作用</p>\n</blockquote>\n<h2 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h2><p>大小比较：<code>&gt;    &lt;    &gt;=    &lt;=</code></p>\n<p>相等比较：<code>==    !=    ===    !==</code></p>\n<p><strong>比较运算符的返回值类型：<code>boolean</code></strong></p>\n<p><strong>算术比较符的优先级大于比较运算符的优先级</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span> + <span class=\"number\">3</span> &gt;= <span class=\"number\">5</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 先运算 2+3 后比较</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>大小比较</li>\n</ul>\n<ol>\n<li><p>两个字符串比较大小，比较的是字符串的<code>ASCLL</code>码</p>\n</li>\n<li><p>如果一方不是字符串，且两方都是原始类型，他们将转换为数字类型进行比较</p>\n</li>\n</ol>\n<p> <code>&#39;1&#39;</code> —&gt; 1</p>\n<p> <code>&#39;&#39;</code> —&gt; 0</p>\n<p> ……….（与隐式转换的规则相同）</p>\n<p> <code>NaN</code>与任何数据（包括它本身）比较都是<code>false</code></p>\n<p> <code>Infinity</code>比任何数字都大</p>\n<p> <code>-Infinity</code>比任何数字都小</p>\n<ol start=\"3\">\n<li>如果其中一方是对象，将对象转换为原始类型后比较</li>\n</ol>\n<ul>\n<li>相等比较</li>\n</ul>\n<ol>\n<li><p>两端的数据类型相同，直接比较两个数据本身是否相同（两个对象则比较地址）</p>\n</li>\n<li><p>两端类型不同</p>\n</li>\n</ol>\n<p> 1）<code>null</code>和<code>undefined</code>之间相等，但是和其他原始类型比较则不相等（如：<code>null</code>== 0  为<code>false</code>）</p>\n<p> 2） 其他原始类型比较时先转换为数字再进行比较</p>\n<p> 3） <code>NaN</code>与任何数字都不相等（包括它自身）</p>\n<p> 4）<code>Infinity</code>和<code>-Infinity</code>只能和它自身相等</p>\n<p> 5） 对象比较时，要先转换为原始类型后再进行比较</p>\n<p> <strong>由于相等（<code>==</code>）和不相等（<code>!=1</code>）比较,对于不同类型的数据比较存在很多不合理的地方，因此，通常我们不适用这种方式进行比较，而是使用更加合理的严格相等（<code>===</code>）和严格不相等（<code>!==</code>）来进行比较</strong></p>\n<ul>\n<li>严格相等和严格不相等</li>\n</ul>\n<p> <code>===</code>: 所比较的两方<strong>数据和数据类型必须相同</strong>才为<code>true</code>，否则为<code>false</code></p>\n<p> <code>!==</code>: 所比较的两方<strong>数据或类型不同</strong>为<code>true</code>，否则为<code>false</code></p>\n</blockquote>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><ul>\n<li><p>与（并且）</p>\n<p>符号: <code>&amp;&amp;</code></p>\n<p>书写方式: <code>表达式1 &amp;&amp; 表达式2</code></p>\n<blockquote>\n<p>先对表达式1进行<code>boolean</code>判断</p>\n<p>若为<code>true</code>则对表达式2进行判断；</p>\n<p>若表达式1未<code>false</code>，则直接返回<code>false</code>，后面的就不管了</p>\n<p><strong>总结一句：与符号返回的是第一个判断为<code>false</code>的表达式</strong>（短路规则）</p>\n</blockquote>\n<p>以下数据均判断为<code>false</code></p>\n<p>1） <code>null</code></p>\n<p>2）<code>undefined</code></p>\n<p>3） <code>false</code></p>\n<p>4） <code>NaN</code></p>\n<p>5） <code>&#39;&#39;</code></p>\n<p>6）<code>0</code></p>\n</li>\n<li><p>或</p>\n<p>符号：<code>||</code></p>\n<p>书写方式：<code>表达式1 || 表达式2</code></p>\n<blockquote>\n<p>先对表达式1进行<code>boolean</code>判断</p>\n<p>若为<code>true</code>则直接返回，后面的就不管了</p>\n<p>若表达式1为<code>false</code>则对表达式2进行判断</p>\n<p><strong>总结一句：或符号返回的是第一个判断为<code>true</code>的表达式</strong>（和与符号真好相反）</p>\n</blockquote>\n</li>\n<li><p>非</p>\n<p>符号：<code>!</code></p>\n<p>书写方式：<code>!数据</code></p>\n<blockquote>\n<p>将数据的<code>boolean</code>判定结果直接取反，非运算符一定返回<code>boolean</code>类型</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"三目运算符\"><a href=\"#三目运算符\" class=\"headerlink\" title=\"三目运算符\"></a>三目运算符</h2><p>书写方式：<code>表达式1 ?  表达式2  :  表达式3</code></p>\n<blockquote>\n<p>对表达式1进行<code>boolean</code>判断，若为<code>true</code>返回表达式2，若为<code>false</code>返回表达式3</p>\n</blockquote>\n<h2 id=\"其他运算符\"><a href=\"#其他运算符\" class=\"headerlink\" title=\"其他运算符\"></a>其他运算符</h2><ul>\n<li><code>+=   -+   *=   /=  %=  **=</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">x += <span class=\"number\">1</span>; <span class=\"comment\">// 等同于 x = x + 1</span></span><br><span class=\"line\">x -= <span class=\"number\">1</span>; <span class=\"comment\">// 等同于 x = x - 1</span></span><br><span class=\"line\">x *= <span class=\"number\">1</span>; <span class=\"comment\">// 等同于 x = x * 1</span></span><br><span class=\"line\">x *= <span class=\"number\">1</span> + <span class=\"number\">2</span>; <span class=\"comment\">// 等同于 x = x * (1 + 2)</span></span><br><span class=\"line\">x /= <span class=\"number\">1</span>; <span class=\"comment\">// 等同于 x = x / 1;</span></span><br><span class=\"line\">x %= <span class=\"number\">1</span>; <span class=\"comment\">// 等同于 x = x % 1;</span></span><br><span class=\"line\">x **= <span class=\"number\">2</span>; <span class=\"comment\">// 等同于 x = x ** 2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>void运算符</code></p>\n<p>书写方式 : <code>void 表达式</code>或<code>void(表达式)</code></p>\n<p>运行表达式，然后返回<code>undefined</code>（额，貌似没啥用……）</p>\n</li>\n<li><p><code>typeof运算符</code></p>\n<p>书写方式 : <code>typeof 表达式</code>或<code>typeof(表达式)</code></p>\n<p>返回表达式的类型，是一个字符串</p>\n<p><code>typeof</code>运算符的优先级高于算术运算符，所以建议使用第二种方式，可以避免一些错误</p>\n</li>\n<li><p>逗号运算符</p>\n<p>书写方式 : <code>表达式1 , 表达式2</code></p>\n<p>依次运行两个（个数不固定，有几个运行几个）表达式，返回表达式2（返回最后一个表达式）</p>\n<p>逗号运算符的优先级比赋值符号还低</p>\n</li>\n</ul>\n"},{"title":"流程控制","date":"2022-06-16T00:36:28.000Z","_content":"\n# 流程控制\n\n## if else\n\n```js\nif(条件1) {\n\t// ...\n}else if(条件2) {\n    // ...\n}else { // 以上条件都不满足\n    // ...\n}\n```\n\n> 1. 如果满足某个条件，则直接忽略后面的所有条件\n> 2. `else if`可以有多个（0个或多个）\n> 3. 如果代码快只有1条语句，可以省略`{}`（不推荐）\n> 4. `if`只能出现一次\n\n## switch\n\n```js\nswitch(表达式){\n\tcase 数据1:\n        // 代码块\n        break;\n    case 数据2:\n        // 代码块\n        break;\n    //...\n    default: \n       // 代码块\n}\n```\n\n>1. 计算表达式的返回值，依次和`case`后面的数据进行**严格相等比较**，如果某个相等，则停止比较，然后运行其内部的代码块，再然后依次执行所有的代码块（没有写`break`的情况下）\n>2. 在`case`分支内部，使用`break`语句，可以立即停止`switch`结构\n>3. `default`表示前面的所有`case`都不匹配时运行（相当于`if else`中的`else`）。可以省略\n","source":"_posts/JS/5.流程控制.md","raw":"---\ntitle: 流程控制\ndate: 2022-06-16 08:36:28\ntags: JavaScript\ncategories:\n - JavaScript\n---\n\n# 流程控制\n\n## if else\n\n```js\nif(条件1) {\n\t// ...\n}else if(条件2) {\n    // ...\n}else { // 以上条件都不满足\n    // ...\n}\n```\n\n> 1. 如果满足某个条件，则直接忽略后面的所有条件\n> 2. `else if`可以有多个（0个或多个）\n> 3. 如果代码快只有1条语句，可以省略`{}`（不推荐）\n> 4. `if`只能出现一次\n\n## switch\n\n```js\nswitch(表达式){\n\tcase 数据1:\n        // 代码块\n        break;\n    case 数据2:\n        // 代码块\n        break;\n    //...\n    default: \n       // 代码块\n}\n```\n\n>1. 计算表达式的返回值，依次和`case`后面的数据进行**严格相等比较**，如果某个相等，则停止比较，然后运行其内部的代码块，再然后依次执行所有的代码块（没有写`break`的情况下）\n>2. 在`case`分支内部，使用`break`语句，可以立即停止`switch`结构\n>3. `default`表示前面的所有`case`都不匹配时运行（相当于`if else`中的`else`）。可以省略\n","slug":"JS/5.流程控制","published":1,"updated":"2022-06-16T01:00:36.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4t7nats0001t0wc41au0o8s","content":"<h1 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h1><h2 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if else\"></a>if else</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(条件<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(条件<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 以上条件都不满足</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol>\n<li>如果满足某个条件，则直接忽略后面的所有条件</li>\n<li><code>else if</code>可以有多个（0个或多个）</li>\n<li>如果代码快只有1条语句，可以省略<code>&#123;&#125;</code>（不推荐）</li>\n<li><code>if</code>只能出现一次</li>\n</ol>\n</blockquote>\n<h2 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(表达式)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> 数据<span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"comment\">// 代码块</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> 数据<span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"comment\">// 代码块</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"attr\">default</span>: </span><br><span class=\"line\">       <span class=\"comment\">// 代码块</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol>\n<li>计算表达式的返回值，依次和<code>case</code>后面的数据进行<strong>严格相等比较</strong>，如果某个相等，则停止比较，然后运行其内部的代码块，再然后依次执行所有的代码块（没有写<code>break</code>的情况下）</li>\n<li>在<code>case</code>分支内部，使用<code>break</code>语句，可以立即停止<code>switch</code>结构</li>\n<li><code>default</code>表示前面的所有<code>case</code>都不匹配时运行（相当于<code>if else</code>中的<code>else</code>）。可以省略</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-3kqv3y.jpg","excerpt":"","more":"<h1 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h1><h2 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if else\"></a>if else</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(条件<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(条件<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 以上条件都不满足</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol>\n<li>如果满足某个条件，则直接忽略后面的所有条件</li>\n<li><code>else if</code>可以有多个（0个或多个）</li>\n<li>如果代码快只有1条语句，可以省略<code>&#123;&#125;</code>（不推荐）</li>\n<li><code>if</code>只能出现一次</li>\n</ol>\n</blockquote>\n<h2 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(表达式)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> 数据<span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"comment\">// 代码块</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> 数据<span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"comment\">// 代码块</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"attr\">default</span>: </span><br><span class=\"line\">       <span class=\"comment\">// 代码块</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol>\n<li>计算表达式的返回值，依次和<code>case</code>后面的数据进行<strong>严格相等比较</strong>，如果某个相等，则停止比较，然后运行其内部的代码块，再然后依次执行所有的代码块（没有写<code>break</code>的情况下）</li>\n<li>在<code>case</code>分支内部，使用<code>break</code>语句，可以立即停止<code>switch</code>结构</li>\n<li><code>default</code>表示前面的所有<code>case</code>都不匹配时运行（相当于<code>if else</code>中的<code>else</code>）。可以省略</li>\n</ol>\n</blockquote>\n"},{"title":"openlayers的基本要素","date":"2022-06-25T01:36:59.000Z","_content":"\n# openlayers的基本要素\n\n## Map\n\n地图的容器，每一个`gis`都需要生成一个`map`实例，所有的操作都需要在`Map`实例上进行。\n\n```js\nthis.olMap = new Map({\n    layers: [],\n    view: new View({}),\n    controls: defaults({}), // 控件\n    target: this.$refs.olMap, // 容器的dom\n})\n```\n\n\n\n## View\n\n地图的窗口（即我们在电脑上能显示的内容）\n","source":"_posts/openlayers/openlayers的基本要素.md","raw":"---\ntitle: openlayers的基本要素\ndate: 2022-06-25 09:36:59\ntags: \n- gis\n- openlayers\ncategories:\n- openlayers\n---\n\n# openlayers的基本要素\n\n## Map\n\n地图的容器，每一个`gis`都需要生成一个`map`实例，所有的操作都需要在`Map`实例上进行。\n\n```js\nthis.olMap = new Map({\n    layers: [],\n    view: new View({}),\n    controls: defaults({}), // 控件\n    target: this.$refs.olMap, // 容器的dom\n})\n```\n\n\n\n## View\n\n地图的窗口（即我们在电脑上能显示的内容）\n","slug":"openlayers/openlayers的基本要素","published":1,"updated":"2022-06-25T02:09:08.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4w1k6kt0000sgwc8w4n1yrp","content":"<h1 id=\"openlayers的基本要素\"><a href=\"#openlayers的基本要素\" class=\"headerlink\" title=\"openlayers的基本要素\"></a>openlayers的基本要素</h1><h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><p>地图的容器，每一个<code>gis</code>都需要生成一个<code>map</code>实例，所有的操作都需要在<code>Map</code>实例上进行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">olMap</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">layers</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">view</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">View</span>(&#123;&#125;),</span><br><span class=\"line\">    <span class=\"attr\">controls</span>: <span class=\"title function_\">defaults</span>(&#123;&#125;), <span class=\"comment\">// 控件</span></span><br><span class=\"line\">    <span class=\"attr\">target</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">olMap</span>, <span class=\"comment\">// 容器的dom</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h2><p>地图的窗口（即我们在电脑上能显示的内容）</p>\n","site":{"data":{}},"cover":"https://object-srote-1305109524.cos.ap-beijing.myqcloud.com/wallpaper/wallhaven-0prgo3.jpg","excerpt":"","more":"<h1 id=\"openlayers的基本要素\"><a href=\"#openlayers的基本要素\" class=\"headerlink\" title=\"openlayers的基本要素\"></a>openlayers的基本要素</h1><h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><p>地图的容器，每一个<code>gis</code>都需要生成一个<code>map</code>实例，所有的操作都需要在<code>Map</code>实例上进行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">olMap</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">layers</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">view</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">View</span>(&#123;&#125;),</span><br><span class=\"line\">    <span class=\"attr\">controls</span>: <span class=\"title function_\">defaults</span>(&#123;&#125;), <span class=\"comment\">// 控件</span></span><br><span class=\"line\">    <span class=\"attr\">target</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">olMap</span>, <span class=\"comment\">// 容器的dom</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h2><p>地图的窗口（即我们在电脑上能显示的内容）</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl4ewmvh9000704wcdj1f3knu","category_id":"cl4ewmvhe000g04wc85td6ekt","_id":"cl4ewmvhk000s04wc8k9pdk6r"},{"post_id":"cl4ewmvha000904wc8oy94iz3","category_id":"cl4ewmvhe000g04wc85td6ekt","_id":"cl4ewmvhm000y04wchw2e55l5"},{"post_id":"cl4ewmvh1000104wcfz925h0n","category_id":"cl4ewmvh6000404wcadh96owq","_id":"cl4ewmvhr001504wceks2fmv2"},{"post_id":"cl4ewmvh1000104wcfz925h0n","category_id":"cl4ewmvhk000r04wc7qb4cfe0","_id":"cl4ewmvht001804wcg192ftyx"},{"post_id":"cl4ewmvhc000e04wcco31bd9b","category_id":"cl4ewmvhc000c04wc1hmaaeii","_id":"cl4ewmvhu001e04wchpvrgljd"},{"post_id":"cl4ewmvhc000e04wcco31bd9b","category_id":"cl4ewmvhp001404wc08d83p6m","_id":"cl4ewmvhu001g04wcepr1c3u8"},{"post_id":"cl4ewmvh4000304wcgalkhaxf","category_id":"cl4ewmvhc000c04wc1hmaaeii","_id":"cl4ewmvhv001i04wc40ax8uwj"},{"post_id":"cl4ewmvh4000304wcgalkhaxf","category_id":"cl4ewmvhp001404wc08d83p6m","_id":"cl4ewmvhv001l04wc66wmf1ch"},{"post_id":"cl4ewmvhd000f04wc85gb1yin","category_id":"cl4ewmvhe000g04wc85td6ekt","_id":"cl4ewmvhw001m04wc0165cpkg"},{"post_id":"cl4ewmvhj000q04wc08fb7x9j","category_id":"cl4ewmvhu001h04wc14zw9trq","_id":"cl4ewmvhx001r04wche8hdabi"},{"post_id":"cl4ewmvhl000u04wc1sxr8izc","category_id":"cl4ewmvhu001h04wc14zw9trq","_id":"cl4ewmvhx001u04wc2cvoel1z"},{"post_id":"cl4ewmvhm000x04wcao7z7bj6","category_id":"cl4ewmvhw001q04wcf4en3khl","_id":"cl4ewmvhy001y04wc023201e9"},{"post_id":"cl4ewmvhp001304wc1tjq0br0","category_id":"cl4ewmvhw001q04wcf4en3khl","_id":"cl4ewmvi0002604wc8fg2ayng"},{"post_id":"cl4ewmvhb000b04wchbbbawwj","category_id":"cl4ewmvhc000c04wc1hmaaeii","_id":"cl4ewmvi0002804wcahxd3luy"},{"post_id":"cl4ewmvhb000b04wchbbbawwj","category_id":"cl4ewmvhp001404wc08d83p6m","_id":"cl4ewmvi1002a04wc3h48a7ts"},{"post_id":"cl4ewmvhn001104wc0fp10iwi","category_id":"cl4ewmvhx001v04wc96445303","_id":"cl4ewmvi1002c04wca4507189"},{"post_id":"cl4ewmvhn001104wc0fp10iwi","category_id":"cl4ewmvhz002504wcd3eobvg0","_id":"cl4ewmvi1002e04wcfowe9a9j"},{"post_id":"cl4ewmvi8002g04wcgq979dvy","category_id":"cl4ewmvhx001v04wc96445303","_id":"cl4ewmvia002o04wc4u0f43la"},{"post_id":"cl4ewmvi8002g04wcgq979dvy","category_id":"cl4ewmvi9002j04wc2gfx9wcv","_id":"cl4ewmvia002q04wc1jnpebkg"},{"post_id":"cl4ewmvi8002h04wc4iw9ft60","category_id":"cl4ewmvhx001v04wc96445303","_id":"cl4ewmvia002s04wc6ksk3zt6"},{"post_id":"cl4ewmvi8002h04wc4iw9ft60","category_id":"cl4ewmvia002l04wc61ge4il4","_id":"cl4ewmvib002t04wcbgbqcez4"},{"post_id":"cl4t7natp0000t0wce5snhe18","category_id":"cl4ewmvhe000g04wc85td6ekt","_id":"cl4t7natu0004t0wc6u54dxvs"},{"post_id":"cl4t7nats0001t0wc41au0o8s","category_id":"cl4ewmvhe000g04wc85td6ekt","_id":"cl4t7natv0005t0wc01kl7lrl"},{"post_id":"cl4w1k6kt0000sgwc8w4n1yrp","category_id":"cl4w1k6l90001sgwca0ibfaun","_id":"cl4w1k6lo0004sgwc7y7u640j"}],"PostTag":[{"post_id":"cl4ewmvh1000104wcfz925h0n","tag_id":"cl4ewmvh7000504wcdrp8bw8h","_id":"cl4ewmvhg000j04wc2wu438gf"},{"post_id":"cl4ewmvh1000104wcfz925h0n","tag_id":"cl4ewmvhc000d04wce83sbzqx","_id":"cl4ewmvhh000l04wc2lv10ztz"},{"post_id":"cl4ewmvh4000304wcgalkhaxf","tag_id":"cl4ewmvhf000h04wc645wg2g3","_id":"cl4ewmvhj000p04wc2ivs3gu1"},{"post_id":"cl4ewmvh9000704wcdj1f3knu","tag_id":"cl4ewmvhh000n04wc3pq8eice","_id":"cl4ewmvhm000w04wc4gjmgvak"},{"post_id":"cl4ewmvha000904wc8oy94iz3","tag_id":"cl4ewmvhh000n04wc3pq8eice","_id":"cl4ewmvho001204wcfu1wgb84"},{"post_id":"cl4ewmvhb000b04wchbbbawwj","tag_id":"cl4ewmvhf000h04wc645wg2g3","_id":"cl4ewmvhs001704wcauzj7i6h"},{"post_id":"cl4ewmvhc000e04wcco31bd9b","tag_id":"cl4ewmvhf000h04wc645wg2g3","_id":"cl4ewmvht001b04wc2vzvfqyk"},{"post_id":"cl4ewmvhd000f04wc85gb1yin","tag_id":"cl4ewmvhh000n04wc3pq8eice","_id":"cl4ewmvhu001f04wcepfj40oe"},{"post_id":"cl4ewmvhf000i04wcezgceozi","tag_id":"cl4ewmvht001c04wcfymm4uih","_id":"cl4ewmvhv001k04wc9nac15yv"},{"post_id":"cl4ewmvhj000o04wcfeg183qa","tag_id":"cl4ewmvhw001n04wcbv86hkmo","_id":"cl4ewmvhx001t04wc9bz3fvum"},{"post_id":"cl4ewmvhj000q04wc08fb7x9j","tag_id":"cl4ewmvhx001s04wc5sh61nki","_id":"cl4ewmvhy001x04wcbaq46vkk"},{"post_id":"cl4ewmvhl000u04wc1sxr8izc","tag_id":"cl4ewmvhx001s04wc5sh61nki","_id":"cl4ewmvhy002104wcg7s3blif"},{"post_id":"cl4ewmvhm000x04wcao7z7bj6","tag_id":"cl4ewmvhy001z04wc46abevin","_id":"cl4ewmvhz002404wc1a8y8m7s"},{"post_id":"cl4ewmvhn001104wc0fp10iwi","tag_id":"cl4ewmvhz002304wc5xn08o2t","_id":"cl4ewmvi1002b04wc7imwbod5"},{"post_id":"cl4ewmvhn001104wc0fp10iwi","tag_id":"cl4ewmvi0002704wcghktcn3h","_id":"cl4ewmvi1002d04wc46gs999d"},{"post_id":"cl4ewmvhp001304wc1tjq0br0","tag_id":"cl4ewmvhy001z04wc46abevin","_id":"cl4ewmvi1002f04wcdzlm5u8l"},{"post_id":"cl4ewmvi8002g04wcgq979dvy","tag_id":"cl4ewmvi9002i04wcga7z353r","_id":"cl4ewmvia002m04wc5tlvdc6w"},{"post_id":"cl4ewmvi8002g04wcgq979dvy","tag_id":"cl4ewmvi0002704wcghktcn3h","_id":"cl4ewmvia002n04wccg8v3gfd"},{"post_id":"cl4ewmvi8002h04wc4iw9ft60","tag_id":"cl4ewmvi9002k04wch8169ysg","_id":"cl4ewmvia002p04wc1t7k6v5b"},{"post_id":"cl4ewmvi8002h04wc4iw9ft60","tag_id":"cl4ewmvi0002704wcghktcn3h","_id":"cl4ewmvia002r04wcd1wkhrds"},{"post_id":"cl4t7natp0000t0wce5snhe18","tag_id":"cl4ewmvhh000n04wc3pq8eice","_id":"cl4t7natu0002t0wc89e3cnw9"},{"post_id":"cl4t7nats0001t0wc41au0o8s","tag_id":"cl4ewmvhh000n04wc3pq8eice","_id":"cl4t7natu0003t0wc4d8g2i62"},{"post_id":"cl4w1k6kt0000sgwc8w4n1yrp","tag_id":"cl4w1k6lk0002sgwc1zh65lqy","_id":"cl4w1k6lo0005sgwcf4x9h4c2"},{"post_id":"cl4w1k6kt0000sgwc8w4n1yrp","tag_id":"cl4w1k6lm0003sgwcbvvxecjy","_id":"cl4w1k6lp0006sgwc2ts1h9bq"}],"Tag":[{"name":"Game","_id":"cl4ewmvh7000504wcdrp8bw8h"},{"name":"饥荒","_id":"cl4ewmvhc000d04wce83sbzqx"},{"name":"TypeScript","_id":"cl4ewmvhf000h04wc645wg2g3"},{"name":"JavaScript","_id":"cl4ewmvhh000n04wc3pq8eice"},{"name":"wallpaper","_id":"cl4ewmvht001c04wcfymm4uih"},{"name":"typora","_id":"cl4ewmvhw001n04wcbv86hkmo"},{"name":"微信小程序","_id":"cl4ewmvhx001s04wc5sh61nki"},{"name":"功能","_id":"cl4ewmvhy001z04wc46abevin"},{"name":"css","_id":"cl4ewmvhz002304wc5xn08o2t"},{"name":"problem","_id":"cl4ewmvi0002704wcghktcn3h"},{"name":"echarts","_id":"cl4ewmvi9002i04wcga7z353r"},{"name":"yarn","_id":"cl4ewmvi9002k04wch8169ysg"},{"name":"gis","_id":"cl4w1k6lk0002sgwc1zh65lqy"},{"name":"openlayers","_id":"cl4w1k6lm0003sgwcbvvxecjy"}]}}